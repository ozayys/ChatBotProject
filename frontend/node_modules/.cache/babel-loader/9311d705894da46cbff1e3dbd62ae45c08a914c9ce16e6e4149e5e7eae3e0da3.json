{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali\\\\Desktop\\\\SonVersiyon\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatArea from './components/ChatArea';\nimport Sidebar from './components/Sidebar';\nimport ModelSelector from './components/ModelSelector';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const [messages, setMessages] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [showModelSelector, setShowModelSelector] = useState(true);\n  useEffect(() => {\n    document.body.className = `${theme}-theme`;\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n  const handleSendMessage = async messageText => {\n    if (!messageText.trim()) return;\n\n    // Add user message to the chat\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      // API endpoint based on selected model\n      const endpoint = selectedModel === 'api' ? 'http://localhost:8000/api/chat' : 'http://localhost:8000/api/custom-model';\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: messageText\n        })\n      });\n      if (!response.ok) {\n        throw new Error('API response was not ok');\n      }\n      const data = await response.json();\n\n      // Add bot response to chat\n      const botMessage = {\n        id: Date.now() + 1,\n        text: data.response,\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: 'Yanıt verilemiyor, lütfen tekrar deneyin.',\n        sender: 'bot',\n        isError: true,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    }\n  };\n  const clearChat = () => {\n    setMessages([]);\n  };\n  const selectModel = model => {\n    setSelectedModel(model);\n    setShowModelSelector(false);\n  };\n  const resetModelSelection = () => {\n    setSelectedModel(null);\n    setShowModelSelector(true);\n    setMessages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: showModelSelector ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n      onSelectModel: selectModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        toggleTheme: toggleTheme,\n        theme: theme,\n        clearChat: clearChat,\n        resetModelSelection: resetModelSelection,\n        selectedModel: selectedModel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n        messages: messages,\n        onSendMessage: handleSendMessage,\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CebhzuJ3hvbuPTsMagA1V62Lk2A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatArea","Sidebar","ModelSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","theme","setTheme","messages","setMessages","selectedModel","setSelectedModel","showModelSelector","setShowModelSelector","document","body","className","toggleTheme","handleSendMessage","messageText","trim","userMessage","id","Date","now","text","sender","timestamp","toISOString","prevMessages","endpoint","response","fetch","method","headers","JSON","stringify","message","ok","Error","data","json","botMessage","error","console","errorMessage","isError","clearChat","selectModel","model","resetModelSelection","children","onSelectModel","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/ali/Desktop/SonVersiyon/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ChatArea from './components/ChatArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport ModelSelector from './components/ModelSelector';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [showModelSelector, setShowModelSelector] = useState(true);\r\n\r\n  useEffect(() => {\r\n    document.body.className = `${theme}-theme`;\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const handleSendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n\r\n    // Add user message to the chat\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: messageText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n\r\n    try {\r\n      // API endpoint based on selected model\r\n      const endpoint = selectedModel === 'api' \r\n        ? 'http://localhost:8000/api/chat' \r\n        : 'http://localhost:8000/api/custom-model';\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message: messageText }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('API response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Add bot response to chat\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: data.response,\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      setMessages(prevMessages => [...prevMessages, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        text: 'Yanıt verilemiyor, lütfen tekrar deneyin.',\r\n        sender: 'bot',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n    }\r\n  };\r\n\r\n  const clearChat = () => {\r\n    setMessages([]);\r\n  };\r\n\r\n  const selectModel = (model) => {\r\n    setSelectedModel(model);\r\n    setShowModelSelector(false);\r\n  };\r\n\r\n  const resetModelSelection = () => {\r\n    setSelectedModel(null);\r\n    setShowModelSelector(true);\r\n    setMessages([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {showModelSelector ? (\r\n        <ModelSelector onSelectModel={selectModel} />\r\n      ) : (\r\n        <>\r\n          <Sidebar\r\n            toggleTheme={toggleTheme}\r\n            theme={theme}\r\n            clearChat={clearChat}\r\n            resetModelSelection={resetModelSelection}\r\n            selectedModel={selectedModel}\r\n          />\r\n          <ChatArea\r\n            messages={messages}\r\n            onSendMessage={handleSendMessage}\r\n            theme={theme}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}