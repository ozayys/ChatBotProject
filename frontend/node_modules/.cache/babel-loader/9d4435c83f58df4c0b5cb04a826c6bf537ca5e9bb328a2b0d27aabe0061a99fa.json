{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali\\\\Desktop\\\\SonVersiyon\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatArea from './components/ChatArea';\nimport Sidebar from './components/Sidebar';\nimport ModelSelector from './components/ModelSelector';\nimport AuthPage from './components/Auth/AuthPage';\nimport UserProfile from './components/UserProfile';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const [messages, setMessages] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [showModelSelector, setShowModelSelector] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // API anahtarı (normalde bu istemci tarafında saklanmamalıdır - sadece demo amaçlıdır)\n  const OPENAI_API_KEY = \"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\";\n  useEffect(() => {\n    document.body.className = `${theme}-theme`;\n  }, [theme]);\n  useEffect(() => {\n    // Check if user is already logged in (from localStorage)\n    const storedUser = localStorage.getItem('demoUser');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (e) {\n        console.error('Error parsing stored user:', e);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Fetch chat history when user selects a model\n    if (user && selectedModel) {\n      fetchChatHistory(selectedModel);\n    }\n  }, [user, selectedModel]);\n  const fetchChatHistory = async model => {\n    if (!user) return;\n    setIsLoading(true);\n    try {\n      // Önce backend API ile deneyelim\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      const modelType = model === 'api' ? 'api' : 'custom';\n      const response = await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\n        headers\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch chat history');\n      }\n      const data = await response.json();\n      setMessages(data.messages || []);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      // Backend çalışmıyorsa localStorage'dan yükle\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n      const storedMessages = localStorage.getItem(`${modelKey}_messages`);\n      if (storedMessages) {\n        try {\n          setMessages(JSON.parse(storedMessages));\n        } catch (e) {\n          console.error('Error parsing stored messages:', e);\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n  const handleAuthSuccess = userData => {\n    setUser(userData);\n    // After authentication, show model selector\n    setShowModelSelector(true);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('demoUser');\n\n    // Tüm modellerin mesajlarını temizle\n    localStorage.removeItem('api_messages');\n    localStorage.removeItem('custom_messages');\n    setUser(null);\n    setMessages([]);\n    setSelectedModel(null);\n    setShowModelSelector(false);\n  };\n\n  // Doğrudan OpenAI API'ye istek gönderen yardımcı fonksiyon\n  const callOpenAI = async message => {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'user',\n          content: message\n        }],\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      var _error$error;\n      const error = await response.json();\n      throw new Error(((_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || 'OpenAI API hatası');\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  };\n\n  // Demo matematik modeli\n  const simpleMathModel = message => {\n    try {\n      // Basit matematik işlemleri için\n      if (/[0-9+\\-*/()^. ]/.test(message) && /[+\\-*/^]/.test(message)) {\n        try {\n          // eslint-disable-next-line no-eval\n          const result = eval(message.replace('^', '**'));\n          return `${message} = ${result}`;\n        } catch (e) {\n          return `Matematik sorunuzu anlayamadım. Lütfen başka bir şekilde sorun.`;\n        }\n      }\n      return `Matematik modeli yanıtı: ${message}\\nBu özellik şu anda geliştirme aşamasındadır.`;\n    } catch (e) {\n      return `Bir hata oluştu: ${e.message}`;\n    }\n  };\n  const handleSendMessage = async messageText => {\n    if (!messageText.trim()) return;\n\n    // Add user message to the chat\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      let responseText;\n\n      // Backend yerine doğrudan API'leri kullan\n      if (selectedModel === 'api') {\n        // OpenAI API'yi kullan\n        responseText = await callOpenAI(messageText);\n      } else {\n        // Basit matematik modeli\n        responseText = simpleMathModel(messageText);\n      }\n\n      // Add bot response to chat\n      const botMessage = {\n        id: Date.now() + 1,\n        text: responseText,\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      };\n      const updatedMessages = [...messages, userMessage, botMessage];\n      setMessages(updatedMessages);\n\n      // Save to local storage\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n      localStorage.setItem(`${modelKey}_messages`, JSON.stringify(updatedMessages));\n    } catch (error) {\n      console.error('Error:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: `Yanıt verilemiyor, lütfen tekrar deneyin. Hata: ${error.message}`,\n        sender: 'bot',\n        isError: true,\n        timestamp: new Date().toISOString()\n      };\n      const updatedMessages = [...messages, userMessage, errorMessage];\n      setMessages(updatedMessages);\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\n    }\n  };\n  const clearChat = async () => {\n    try {\n      // Backend ile deneme\n      if (user && selectedModel) {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json'\n        };\n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\n        await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\n          method: 'DELETE',\n          headers\n        });\n      }\n    } catch (error) {\n      console.error('Error clearing chat history from backend:', error);\n    }\n\n    // Clear local state and storage\n    setMessages([]);\n    const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n    localStorage.removeItem(`${modelKey}_messages`);\n  };\n  const selectModel = model => {\n    setSelectedModel(model);\n    setShowModelSelector(false);\n  };\n  const resetModelSelection = () => {\n    setSelectedModel(null);\n    setShowModelSelector(true);\n    setMessages([]);\n  };\n\n  // If not logged in, show auth page\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(AuthPage, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: showModelSelector ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n      onSelectModel: selectModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this) : selectedModel ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        toggleTheme: toggleTheme,\n        theme: theme,\n        clearChat: clearChat,\n        resetModelSelection: resetModelSelection,\n        selectedModel: selectedModel,\n        children: /*#__PURE__*/_jsxDEV(UserProfile, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n        messages: messages,\n        onSendMessage: handleSendMessage,\n        theme: theme,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(ModelSelector, {\n      onSelectModel: selectModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5qq3iCUni6o3Yioswa1uBbV4XOo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatArea","Sidebar","ModelSelector","AuthPage","UserProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","theme","setTheme","messages","setMessages","selectedModel","setSelectedModel","showModelSelector","setShowModelSelector","user","setUser","isLoading","setIsLoading","OPENAI_API_KEY","document","body","className","storedUser","localStorage","getItem","JSON","parse","e","console","error","fetchChatHistory","model","token","headers","modelType","response","fetch","ok","Error","data","json","modelKey","storedMessages","toggleTheme","handleAuthSuccess","userData","handleLogout","removeItem","callOpenAI","message","method","stringify","role","content","temperature","_error$error","choices","simpleMathModel","test","result","eval","replace","handleSendMessage","messageText","trim","userMessage","id","Date","now","text","sender","timestamp","toISOString","prevMessages","responseText","botMessage","updatedMessages","setItem","errorMessage","isError","clearChat","selectModel","resetModelSelection","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","children","onSelectModel","onLogout","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/ali/Desktop/SonVersiyon/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ChatArea from './components/ChatArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport ModelSelector from './components/ModelSelector';\r\nimport AuthPage from './components/Auth/AuthPage';\r\nimport UserProfile from './components/UserProfile';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [showModelSelector, setShowModelSelector] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // API anahtarı (normalde bu istemci tarafında saklanmamalıdır - sadece demo amaçlıdır)\r\n  const OPENAI_API_KEY = \"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\";\r\n\r\n  useEffect(() => {\r\n    document.body.className = `${theme}-theme`;\r\n  }, [theme]);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in (from localStorage)\r\n    const storedUser = localStorage.getItem('demoUser');\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (e) {\r\n        console.error('Error parsing stored user:', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch chat history when user selects a model\r\n    if (user && selectedModel) {\r\n      fetchChatHistory(selectedModel);\r\n    }\r\n  }, [user, selectedModel]);\r\n\r\n  const fetchChatHistory = async (model) => {\r\n    if (!user) return;\r\n    \r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Önce backend API ile deneyelim\r\n      const token = localStorage.getItem('token');\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      const modelType = model === 'api' ? 'api' : 'custom';\r\n      const response = await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\r\n        headers,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch chat history');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setMessages(data.messages || []);\r\n    } catch (error) {\r\n      console.error('Error fetching chat history:', error);\r\n      // Backend çalışmıyorsa localStorage'dan yükle\r\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n      const storedMessages = localStorage.getItem(`${modelKey}_messages`);\r\n      if (storedMessages) {\r\n        try {\r\n          setMessages(JSON.parse(storedMessages));\r\n        } catch (e) {\r\n          console.error('Error parsing stored messages:', e);\r\n        }\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const handleAuthSuccess = (userData) => {\r\n    setUser(userData);\r\n    // After authentication, show model selector\r\n    setShowModelSelector(true);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('demoUser');\r\n    \r\n    // Tüm modellerin mesajlarını temizle\r\n    localStorage.removeItem('api_messages');\r\n    localStorage.removeItem('custom_messages');\r\n    \r\n    setUser(null);\r\n    setMessages([]);\r\n    setSelectedModel(null);\r\n    setShowModelSelector(false);\r\n  };\r\n\r\n  // Doğrudan OpenAI API'ye istek gönderen yardımcı fonksiyon\r\n  const callOpenAI = async (message) => {\r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-3.5-turbo',\r\n        messages: [{ role: 'user', content: message }],\r\n        temperature: 0.7\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.error?.message || 'OpenAI API hatası');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.choices[0].message.content;\r\n  };\r\n\r\n  // Demo matematik modeli\r\n  const simpleMathModel = (message) => {\r\n    try {\r\n      // Basit matematik işlemleri için\r\n      if (/[0-9+\\-*/()^. ]/.test(message) && /[+\\-*/^]/.test(message)) {\r\n        try {\r\n          // eslint-disable-next-line no-eval\r\n          const result = eval(message.replace('^', '**'));\r\n          return `${message} = ${result}`;\r\n        } catch (e) {\r\n          return `Matematik sorunuzu anlayamadım. Lütfen başka bir şekilde sorun.`;\r\n        }\r\n      }\r\n      return `Matematik modeli yanıtı: ${message}\\nBu özellik şu anda geliştirme aşamasındadır.`;\r\n    } catch (e) {\r\n      return `Bir hata oluştu: ${e.message}`;\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n\r\n    // Add user message to the chat\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: messageText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n\r\n    try {\r\n      let responseText;\r\n\r\n      // Backend yerine doğrudan API'leri kullan\r\n      if (selectedModel === 'api') {\r\n        // OpenAI API'yi kullan\r\n        responseText = await callOpenAI(messageText);\r\n      } else {\r\n        // Basit matematik modeli\r\n        responseText = simpleMathModel(messageText);\r\n      }\r\n      \r\n      // Add bot response to chat\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: responseText,\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const updatedMessages = [...messages, userMessage, botMessage];\r\n      setMessages(updatedMessages);\r\n      \r\n      // Save to local storage\r\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n      localStorage.setItem(`${modelKey}_messages`, JSON.stringify(updatedMessages));\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        text: `Yanıt verilemiyor, lütfen tekrar deneyin. Hata: ${error.message}`,\r\n        sender: 'bot',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const updatedMessages = [...messages, userMessage, errorMessage];\r\n      setMessages(updatedMessages);\r\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\r\n    }\r\n  };\r\n\r\n  const clearChat = async () => {\r\n    try {\r\n      // Backend ile deneme\r\n      if (user && selectedModel) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = {\r\n          'Content-Type': 'application/json',\r\n        };\r\n        \r\n        if (token) {\r\n          headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        \r\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\r\n        await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\r\n          method: 'DELETE',\r\n          headers,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing chat history from backend:', error);\r\n    }\r\n    \r\n    // Clear local state and storage\r\n    setMessages([]);\r\n    const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n    localStorage.removeItem(`${modelKey}_messages`);\r\n  };\r\n\r\n  const selectModel = (model) => {\r\n    setSelectedModel(model);\r\n    setShowModelSelector(false);\r\n  };\r\n\r\n  const resetModelSelection = () => {\r\n    setSelectedModel(null);\r\n    setShowModelSelector(true);\r\n    setMessages([]);\r\n  };\r\n\r\n  // If not logged in, show auth page\r\n  if (!user) {\r\n    return <AuthPage onAuthSuccess={handleAuthSuccess} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {showModelSelector ? (\r\n        <ModelSelector onSelectModel={selectModel} />\r\n      ) : selectedModel ? (\r\n        <>\r\n          <Sidebar\r\n            toggleTheme={toggleTheme}\r\n            theme={theme}\r\n            clearChat={clearChat}\r\n            resetModelSelection={resetModelSelection}\r\n            selectedModel={selectedModel}\r\n          >\r\n            <UserProfile user={user} onLogout={handleLogout} />\r\n          </Sidebar>\r\n          <ChatArea\r\n            messages={messages}\r\n            onSendMessage={handleSendMessage}\r\n            theme={theme}\r\n            isLoading={isLoading}\r\n          />\r\n        </>\r\n      ) : (\r\n        <ModelSelector onSelectModel={selectModel} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}