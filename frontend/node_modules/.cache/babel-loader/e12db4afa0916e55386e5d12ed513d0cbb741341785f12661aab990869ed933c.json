{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali\\\\Desktop\\\\SonVersiyon\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatArea from './components/ChatArea';\nimport Sidebar from './components/Sidebar';\nimport ModelSelector from './components/ModelSelector';\nimport AuthPage from './components/Auth/AuthPage';\nimport UserProfile from './components/UserProfile';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const [messages, setMessages] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [showModelSelector, setShowModelSelector] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeConversationId, setActiveConversationId] = useState(null);\n\n  // API anahtarı (normalde bu istemci tarafında saklanmamalıdır - sadece demo amaçlıdır)\n  const DEEPSEEK_API_KEY = \"sk-7088c20707b64f51a324057b6d7aa85e\";\n  useEffect(() => {\n    document.body.className = `${theme}-theme`;\n  }, [theme]);\n  useEffect(() => {\n    // Check if user is already logged in (from localStorage)\n    const storedUser = localStorage.getItem('demoUser');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (e) {\n        console.error('Error parsing stored user:', e);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Fetch chat history when user selects a model\n    if (user && selectedModel) {\n      fetchChatHistory(selectedModel);\n    }\n  }, [user, selectedModel]);\n  const fetchChatHistory = async (model, conversationId) => {\n    if (!user) return;\n    setIsLoading(true);\n    setActiveConversationId(conversationId);\n    try {\n      // Önce backend API ile deneyelim\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n        console.log('Sending request with token:', token);\n      }\n      const modelType = model === 'api' ? 'api' : 'custom';\n      let endpoint = `http://localhost:8000/api/chat-history?model=${modelType}`;\n\n      // Eğer conversationId belirtilmişse, belirli bir konuşmaya ait mesajları getir\n      if (conversationId) {\n        endpoint = `http://localhost:8000/api/conversations/${conversationId}/messages`;\n      }\n      const response = await fetch(endpoint, {\n        headers\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Error response:', response.status, errorData);\n        throw new Error(`Failed to fetch chat history: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // API'den dönen mesajları formatla\n      const formattedMessages = data.messages ? data.messages : data.map(msg => ({\n        id: msg.id,\n        text: msg.content,\n        sender: msg.role === 'user' ? 'user' : 'bot',\n        timestamp: msg.timestamp || new Date().toISOString()\n      }));\n      setMessages(formattedMessages || []);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      // Backend çalışmıyorsa localStorage'dan yükle\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n      const storedMessages = localStorage.getItem(`${modelKey}_messages`);\n      if (storedMessages) {\n        try {\n          setMessages(JSON.parse(storedMessages));\n        } catch (e) {\n          console.error('Error parsing stored messages:', e);\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n  const handleAuthSuccess = userData => {\n    setUser(userData);\n\n    // Token'ı localStorage'a kaydet\n    if (userData && userData.token) {\n      localStorage.setItem('token', userData.token);\n      console.log('Token saved to localStorage:', userData.token);\n    } else {\n      console.error('Token missing in user data:', userData);\n    }\n\n    // After authentication, show model selector\n    setShowModelSelector(true);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('demoUser');\n\n    // Tüm modellerin mesajlarını temizle\n    localStorage.removeItem('api_messages');\n    localStorage.removeItem('custom_messages');\n    setUser(null);\n    setMessages([]);\n    setSelectedModel(null);\n    setShowModelSelector(false);\n    setActiveConversationId(null);\n  };\n\n  // DeepSeek API'sini kullanarak matematiksel soruları çözme\n  const callDeepSeekAPI = async query => {\n    try {\n      console.log('Calling Math.js API with query:', query);\n\n      // Doğrudan demo endpoint'e istek yap (kimlik doğrulama gerektirmez)\n      const demoResponse = await fetch('http://localhost:8000/api/deepseek-solver-demo', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: query\n        })\n      });\n      if (!demoResponse.ok) {\n        console.error('Demo endpoint error:', demoResponse.status);\n        const errorText = await demoResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error(`Demo API hatası: ${demoResponse.status}`);\n      }\n      const data = await demoResponse.json();\n      console.log('Math.js API success:', data);\n      return data.response;\n    } catch (error) {\n      console.error('Math.js API error:', error);\n\n      // Son çare olarak basit matematik modelini kullan\n      return simpleMathModel(query);\n    }\n  };\n\n  // Demo matematik modeli (basit işlemler için)\n  const simpleMathModel = message => {\n    try {\n      // Basit matematik işlemleri için\n      if (/[0-9+\\-*/()^. ]/.test(message) && /[+\\-*/^]/.test(message)) {\n        try {\n          // eslint-disable-next-line no-eval\n          const result = eval(message.replace('^', '**'));\n          return `${message} = ${result}`;\n        } catch (e) {\n          return `Matematik sorunuzu anlayamadım. Lütfen başka bir şekilde sorun.`;\n        }\n      }\n      const lowerMsg = message.toLowerCase();\n      if (lowerMsg.includes('toplama') || lowerMsg.includes('topla')) {\n        return 'Toplama işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 5 + 3';\n      }\n      if (lowerMsg.includes('çıkarma') || lowerMsg.includes('çıkar')) {\n        return 'Çıkarma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 10 - 4';\n      }\n      if (lowerMsg.includes('çarpma') || lowerMsg.includes('çarp')) {\n        return 'Çarpma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 6 * 7';\n      }\n      if (lowerMsg.includes('bölme') || lowerMsg.includes('böl')) {\n        return 'Bölme işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 20 / 5';\n      }\n      if (lowerMsg.includes('kare') || lowerMsg.includes('üssü')) {\n        return 'Üs alma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 2^3 veya 5^2';\n      }\n      if (lowerMsg.includes('türev') || lowerMsg.includes('integral') || lowerMsg.includes('limit') || lowerMsg.includes('denklem')) {\n        return `Bu tür karmaşık matematik soruları için doğrudan sorunuzu yazabilirsiniz. Örneğin: \"türev x^2\" veya \"integral sin(x)\".`;\n      }\n      return `Matematik sorunuz: \"${message}\" anlaşılamadı. Lütfen doğrudan matematik işlemini yazın. Örnek: 5 + 3, 10 - 2, 4 * 7, 20 / 5, 2^3, türev x^2, integral sin(x)`;\n    } catch (e) {\n      return `Bir hata oluştu: ${e.message}`;\n    }\n  };\n\n  // Demo chatbot - API olmadan demo yanıtlar üreten fonksiyon\n  const demoChatbot = message => {\n    const lowerMsg = message.toLowerCase();\n    if (lowerMsg.includes('merhaba') || lowerMsg.includes('selam')) {\n      return 'Merhaba! Size nasıl yardımcı olabilirim?';\n    }\n    if (lowerMsg.includes('nasılsın')) {\n      return 'Teşekkür ederim, ben bir AI asistanım. Duygularım yok ama size yardımcı olmaktan memnuniyet duyarım!';\n    }\n    if (lowerMsg.includes('hava') && (lowerMsg.includes('nasıl') || lowerMsg.includes('durumu'))) {\n      return 'Üzgünüm, gerçek zamanlı hava durumu verilerine erişimim yok. Ancak güvenilir bir hava durumu uygulaması veya sitesi kullanmanızı öneririm.';\n    }\n    if (lowerMsg.includes('yemek') || lowerMsg.includes('tarif')) {\n      return 'Yemek tarifleri konusunda size yardımcı olabilirim. Ne tür bir yemek yapmak istiyorsunuz?';\n    }\n    if (lowerMsg.includes('film') || lowerMsg.includes('öneri')) {\n      return 'Film önerisi istiyorsanız, son zamanlarda çıkan popüler filmler: \"Dune\", \"No Time to Die\", \"The French Dispatch\". Ne tür filmlerden hoşlanırsınız?';\n    }\n    if (lowerMsg.includes('kitap')) {\n      return 'Kitap önerileri için önce hangi türleri sevdiğinizi bilmem gerekiyor. Roman, bilim kurgu, fantastik, tarih veya kişisel gelişim kitapları hakkında konuşabiliriz.';\n    }\n    if (lowerMsg.includes('kod') || lowerMsg.includes('programlama') || lowerMsg.includes('yazılım')) {\n      return 'Programlama hakkında sorularınız varsa, hangi dil veya framework ile ilgilendiğinizi belirtirseniz daha spesifik yardım sağlayabilirim.';\n    }\n    if (lowerMsg.includes('teşekkür')) {\n      return 'Rica ederim! Başka bir sorunuz olursa yardımcı olmaktan memnuniyet duyarım.';\n    }\n    if (lowerMsg.length < 5) {\n      return 'Daha ayrıntılı bir şey sorar mısınız? Size daha iyi yardımcı olabilirim.';\n    }\n\n    // Genel yanıt\n    return `\"${message}\" hakkında yardımcı olmak isterim. Lütfen sorularınızı detaylandırırsanız daha iyi cevaplar verebilirim.`;\n  };\n\n  // Matematiksel sorgunun türünü belirle\n  const isMathQuery = query => {\n    const mathKeywords = ['türev', 'integral', 'limit', 'denklem', 'çöz', 'hesapla', 'derivative', 'integrate', 'solve', 'equation', 'calculate', 'kök', 'faktör', 'simplify', 'expand'];\n    const mathRegex = /[0-9+\\-*/()^.=<>√∫∂∑π]/;\n    const lowerQuery = query.toLowerCase();\n\n    // Matematik anahtar kelimesi içeriyor mu?\n    const hasMathKeyword = mathKeywords.some(keyword => lowerQuery.includes(keyword));\n\n    // Matematik sembolü veya sayı içeriyor mu?\n    const hasMathSymbol = mathRegex.test(query);\n    return hasMathKeyword || hasMathSymbol;\n  };\n  const handleSendMessage = async messageText => {\n    if (!messageText.trim()) return;\n\n    // Add user message to the chat\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      let responseText;\n\n      // Gelen mesajın matematik sorusu olup olmadığını kontrol et\n      if (selectedModel === 'custom' || selectedModel === 'api' && isMathQuery(messageText)) {\n        // Matematik sorularını DeepSeek API ile çöz\n        responseText = await callDeepSeekAPI(messageText);\n      } else {\n        // Sohbet soruları için demo chatbot kullan\n        responseText = demoChatbot(messageText);\n      }\n\n      // Add bot response to chat\n      const botMessage = {\n        id: Date.now() + 1,\n        text: responseText,\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      };\n      const updatedMessages = [...messages, userMessage, botMessage];\n      setMessages(updatedMessages);\n\n      // Save to local storage\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n      localStorage.setItem(`${modelKey}_messages`, JSON.stringify(updatedMessages));\n\n      // Mesajı veritabanına kaydet - eğer bir konuşma mevcutsa\n      if (activeConversationId) {\n        try {\n          const token = localStorage.getItem('token');\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              content: messageText,\n              role: 'user'\n            })\n          });\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              content: responseText,\n              role: 'assistant'\n            })\n          });\n        } catch (error) {\n          console.error('Error saving messages to database:', error);\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: `Yanıt verilemiyor, lütfen tekrar deneyin. Hata: ${error.message}`,\n        sender: 'bot',\n        isError: true,\n        timestamp: new Date().toISOString()\n      };\n      const updatedMessages = [...messages, userMessage, errorMessage];\n      setMessages(updatedMessages);\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\n    }\n  };\n  const clearChat = async () => {\n    try {\n      // Backend ile deneme\n      if (user && selectedModel && activeConversationId) {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        };\n\n        // Aktif konuşmanın mesajlarını temizle\n        await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\n          method: 'DELETE',\n          headers\n        });\n      } else if (user && selectedModel) {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json'\n        };\n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\n        await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\n          method: 'DELETE',\n          headers\n        });\n      }\n    } catch (error) {\n      console.error('Error clearing chat history from backend:', error);\n    }\n\n    // Clear local state and storage\n    setMessages([]);\n    const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n    localStorage.removeItem(`${modelKey}_messages`);\n  };\n  const selectModel = model => {\n    setSelectedModel(model);\n    setShowModelSelector(false);\n  };\n  const resetModelSelection = () => {\n    setSelectedModel(null);\n    setShowModelSelector(true);\n    setMessages([]);\n    setActiveConversationId(null);\n  };\n\n  // If not logged in, show auth page\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(AuthPage, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: showModelSelector ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n      onSelectModel: selectModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }, this) : selectedModel ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        toggleTheme: toggleTheme,\n        theme: theme,\n        clearChat: clearChat,\n        resetModelSelection: resetModelSelection,\n        selectedModel: selectedModel,\n        messages: messages,\n        onSendMessage: handleSendMessage,\n        fetchChatHistory: fetchChatHistory,\n        user: user,\n        children: /*#__PURE__*/_jsxDEV(UserProfile, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n        messages: messages,\n        onSendMessage: handleSendMessage,\n        theme: theme,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(ModelSelector, {\n      onSelectModel: selectModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m3DG9pXQwBa6dbn0RH9iIORU0TQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatArea","Sidebar","ModelSelector","AuthPage","UserProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","theme","setTheme","messages","setMessages","selectedModel","setSelectedModel","showModelSelector","setShowModelSelector","user","setUser","isLoading","setIsLoading","activeConversationId","setActiveConversationId","DEEPSEEK_API_KEY","document","body","className","storedUser","localStorage","getItem","JSON","parse","e","console","error","fetchChatHistory","model","conversationId","token","headers","log","modelType","endpoint","response","fetch","ok","errorData","json","catch","status","Error","data","formattedMessages","map","msg","id","text","content","sender","role","timestamp","Date","toISOString","modelKey","storedMessages","toggleTheme","handleAuthSuccess","userData","setItem","handleLogout","removeItem","callDeepSeekAPI","query","demoResponse","method","stringify","message","errorText","simpleMathModel","test","result","eval","replace","lowerMsg","toLowerCase","includes","demoChatbot","length","isMathQuery","mathKeywords","mathRegex","lowerQuery","hasMathKeyword","some","keyword","hasMathSymbol","handleSendMessage","messageText","trim","userMessage","now","prevMessages","responseText","botMessage","updatedMessages","errorMessage","isError","clearChat","selectModel","resetModelSelection","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","children","onSelectModel","onSendMessage","onLogout","_c","$RefreshReg$"],"sources":["C:/Users/ali/Desktop/SonVersiyon/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ChatArea from './components/ChatArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport ModelSelector from './components/ModelSelector';\r\nimport AuthPage from './components/Auth/AuthPage';\r\nimport UserProfile from './components/UserProfile';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [showModelSelector, setShowModelSelector] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [activeConversationId, setActiveConversationId] = useState(null);\r\n\r\n  // API anahtarı (normalde bu istemci tarafında saklanmamalıdır - sadece demo amaçlıdır)\r\n  const DEEPSEEK_API_KEY = \"sk-7088c20707b64f51a324057b6d7aa85e\";\r\n\r\n  useEffect(() => {\r\n    document.body.className = `${theme}-theme`;\r\n  }, [theme]);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in (from localStorage)\r\n    const storedUser = localStorage.getItem('demoUser');\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (e) {\r\n        console.error('Error parsing stored user:', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch chat history when user selects a model\r\n    if (user && selectedModel) {\r\n      fetchChatHistory(selectedModel);\r\n    }\r\n  }, [user, selectedModel]);\r\n\r\n  const fetchChatHistory = async (model, conversationId) => {\r\n    if (!user) return;\r\n    \r\n    setIsLoading(true);\r\n    setActiveConversationId(conversationId);\r\n    \r\n    try {\r\n      // Önce backend API ile deneyelim\r\n      const token = localStorage.getItem('token');\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n        console.log('Sending request with token:', token);\r\n      }\r\n      \r\n      const modelType = model === 'api' ? 'api' : 'custom';\r\n      let endpoint = `http://localhost:8000/api/chat-history?model=${modelType}`;\r\n      \r\n      // Eğer conversationId belirtilmişse, belirli bir konuşmaya ait mesajları getir\r\n      if (conversationId) {\r\n        endpoint = `http://localhost:8000/api/conversations/${conversationId}/messages`;\r\n      }\r\n      \r\n      const response = await fetch(endpoint, {\r\n        headers,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Error response:', response.status, errorData);\r\n        throw new Error(`Failed to fetch chat history: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // API'den dönen mesajları formatla\r\n      const formattedMessages = data.messages ? data.messages : data.map(msg => ({\r\n        id: msg.id,\r\n        text: msg.content,\r\n        sender: msg.role === 'user' ? 'user' : 'bot',\r\n        timestamp: msg.timestamp || new Date().toISOString()\r\n      }));\r\n      \r\n      setMessages(formattedMessages || []);\r\n    } catch (error) {\r\n      console.error('Error fetching chat history:', error);\r\n      // Backend çalışmıyorsa localStorage'dan yükle\r\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n      const storedMessages = localStorage.getItem(`${modelKey}_messages`);\r\n      if (storedMessages) {\r\n        try {\r\n          setMessages(JSON.parse(storedMessages));\r\n        } catch (e) {\r\n          console.error('Error parsing stored messages:', e);\r\n        }\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const handleAuthSuccess = (userData) => {\r\n    setUser(userData);\r\n    \r\n    // Token'ı localStorage'a kaydet\r\n    if (userData && userData.token) {\r\n      localStorage.setItem('token', userData.token);\r\n      console.log('Token saved to localStorage:', userData.token);\r\n    } else {\r\n      console.error('Token missing in user data:', userData);\r\n    }\r\n    \r\n    // After authentication, show model selector\r\n    setShowModelSelector(true);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('demoUser');\r\n    \r\n    // Tüm modellerin mesajlarını temizle\r\n    localStorage.removeItem('api_messages');\r\n    localStorage.removeItem('custom_messages');\r\n    \r\n    setUser(null);\r\n    setMessages([]);\r\n    setSelectedModel(null);\r\n    setShowModelSelector(false);\r\n    setActiveConversationId(null);\r\n  };\r\n\r\n  // DeepSeek API'sini kullanarak matematiksel soruları çözme\r\n  const callDeepSeekAPI = async (query) => {\r\n    try {\r\n      console.log('Calling Math.js API with query:', query);\r\n      \r\n      // Doğrudan demo endpoint'e istek yap (kimlik doğrulama gerektirmez)\r\n      const demoResponse = await fetch('http://localhost:8000/api/deepseek-solver-demo', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ message: query })\r\n      });\r\n      \r\n      if (!demoResponse.ok) {\r\n        console.error('Demo endpoint error:', demoResponse.status);\r\n        const errorText = await demoResponse.text();\r\n        console.error('Error response:', errorText);\r\n        throw new Error(`Demo API hatası: ${demoResponse.status}`);\r\n      }\r\n      \r\n      const data = await demoResponse.json();\r\n      console.log('Math.js API success:', data);\r\n      return data.response;\r\n    } catch (error) {\r\n      console.error('Math.js API error:', error);\r\n      \r\n      // Son çare olarak basit matematik modelini kullan\r\n      return simpleMathModel(query);\r\n    }\r\n  };\r\n\r\n  // Demo matematik modeli (basit işlemler için)\r\n  const simpleMathModel = (message) => {\r\n    try {\r\n      // Basit matematik işlemleri için\r\n      if (/[0-9+\\-*/()^. ]/.test(message) && /[+\\-*/^]/.test(message)) {\r\n        try {\r\n          // eslint-disable-next-line no-eval\r\n          const result = eval(message.replace('^', '**'));\r\n          return `${message} = ${result}`;\r\n        } catch (e) {\r\n          return `Matematik sorunuzu anlayamadım. Lütfen başka bir şekilde sorun.`;\r\n        }\r\n      }\r\n      \r\n      const lowerMsg = message.toLowerCase();\r\n      \r\n      if (lowerMsg.includes('toplama') || lowerMsg.includes('topla')) {\r\n        return 'Toplama işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 5 + 3';\r\n      }\r\n      \r\n      if (lowerMsg.includes('çıkarma') || lowerMsg.includes('çıkar')) {\r\n        return 'Çıkarma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 10 - 4';\r\n      }\r\n      \r\n      if (lowerMsg.includes('çarpma') || lowerMsg.includes('çarp')) {\r\n        return 'Çarpma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 6 * 7';\r\n      }\r\n      \r\n      if (lowerMsg.includes('bölme') || lowerMsg.includes('böl')) {\r\n        return 'Bölme işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 20 / 5';\r\n      }\r\n      \r\n      if (lowerMsg.includes('kare') || lowerMsg.includes('üssü')) {\r\n        return 'Üs alma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 2^3 veya 5^2';\r\n      }\r\n      \r\n      if (lowerMsg.includes('türev') || lowerMsg.includes('integral') || \r\n          lowerMsg.includes('limit') || lowerMsg.includes('denklem')) {\r\n        return `Bu tür karmaşık matematik soruları için doğrudan sorunuzu yazabilirsiniz. Örneğin: \"türev x^2\" veya \"integral sin(x)\".`;\r\n      }\r\n      \r\n      return `Matematik sorunuz: \"${message}\" anlaşılamadı. Lütfen doğrudan matematik işlemini yazın. Örnek: 5 + 3, 10 - 2, 4 * 7, 20 / 5, 2^3, türev x^2, integral sin(x)`;\r\n    } catch (e) {\r\n      return `Bir hata oluştu: ${e.message}`;\r\n    }\r\n  };\r\n\r\n  // Demo chatbot - API olmadan demo yanıtlar üreten fonksiyon\r\n  const demoChatbot = (message) => {\r\n    const lowerMsg = message.toLowerCase();\r\n    \r\n    if (lowerMsg.includes('merhaba') || lowerMsg.includes('selam')) {\r\n      return 'Merhaba! Size nasıl yardımcı olabilirim?';\r\n    }\r\n    \r\n    if (lowerMsg.includes('nasılsın')) {\r\n      return 'Teşekkür ederim, ben bir AI asistanım. Duygularım yok ama size yardımcı olmaktan memnuniyet duyarım!';\r\n    }\r\n    \r\n    if (lowerMsg.includes('hava') && (lowerMsg.includes('nasıl') || lowerMsg.includes('durumu'))) {\r\n      return 'Üzgünüm, gerçek zamanlı hava durumu verilerine erişimim yok. Ancak güvenilir bir hava durumu uygulaması veya sitesi kullanmanızı öneririm.';\r\n    }\r\n    \r\n    if (lowerMsg.includes('yemek') || lowerMsg.includes('tarif')) {\r\n      return 'Yemek tarifleri konusunda size yardımcı olabilirim. Ne tür bir yemek yapmak istiyorsunuz?';\r\n    }\r\n    \r\n    if (lowerMsg.includes('film') || lowerMsg.includes('öneri')) {\r\n      return 'Film önerisi istiyorsanız, son zamanlarda çıkan popüler filmler: \"Dune\", \"No Time to Die\", \"The French Dispatch\". Ne tür filmlerden hoşlanırsınız?';\r\n    }\r\n    \r\n    if (lowerMsg.includes('kitap')) {\r\n      return 'Kitap önerileri için önce hangi türleri sevdiğinizi bilmem gerekiyor. Roman, bilim kurgu, fantastik, tarih veya kişisel gelişim kitapları hakkında konuşabiliriz.';\r\n    }\r\n    \r\n    if (lowerMsg.includes('kod') || lowerMsg.includes('programlama') || lowerMsg.includes('yazılım')) {\r\n      return 'Programlama hakkında sorularınız varsa, hangi dil veya framework ile ilgilendiğinizi belirtirseniz daha spesifik yardım sağlayabilirim.';\r\n    }\r\n    \r\n    if (lowerMsg.includes('teşekkür')) {\r\n      return 'Rica ederim! Başka bir sorunuz olursa yardımcı olmaktan memnuniyet duyarım.';\r\n    }\r\n    \r\n    if (lowerMsg.length < 5) {\r\n      return 'Daha ayrıntılı bir şey sorar mısınız? Size daha iyi yardımcı olabilirim.';\r\n    }\r\n    \r\n    // Genel yanıt\r\n    return `\"${message}\" hakkında yardımcı olmak isterim. Lütfen sorularınızı detaylandırırsanız daha iyi cevaplar verebilirim.`;\r\n  };\r\n\r\n  // Matematiksel sorgunun türünü belirle\r\n  const isMathQuery = (query) => {\r\n    const mathKeywords = ['türev', 'integral', 'limit', 'denklem', 'çöz', 'hesapla', \r\n                          'derivative', 'integrate', 'solve', 'equation', 'calculate', \r\n                          'kök', 'faktör', 'simplify', 'expand'];\r\n    \r\n    const mathRegex = /[0-9+\\-*/()^.=<>√∫∂∑π]/;\r\n    \r\n    const lowerQuery = query.toLowerCase();\r\n    \r\n    // Matematik anahtar kelimesi içeriyor mu?\r\n    const hasMathKeyword = mathKeywords.some(keyword => lowerQuery.includes(keyword));\r\n    \r\n    // Matematik sembolü veya sayı içeriyor mu?\r\n    const hasMathSymbol = mathRegex.test(query);\r\n    \r\n    return hasMathKeyword || hasMathSymbol;\r\n  };\r\n\r\n  const handleSendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n\r\n    // Add user message to the chat\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: messageText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n\r\n    try {\r\n      let responseText;\r\n\r\n      // Gelen mesajın matematik sorusu olup olmadığını kontrol et\r\n      if (selectedModel === 'custom' || (selectedModel === 'api' && isMathQuery(messageText))) {\r\n        // Matematik sorularını DeepSeek API ile çöz\r\n        responseText = await callDeepSeekAPI(messageText);\r\n      } else {\r\n        // Sohbet soruları için demo chatbot kullan\r\n        responseText = demoChatbot(messageText);\r\n      }\r\n      \r\n      // Add bot response to chat\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: responseText,\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const updatedMessages = [...messages, userMessage, botMessage];\r\n      setMessages(updatedMessages);\r\n      \r\n      // Save to local storage\r\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n      localStorage.setItem(`${modelKey}_messages`, JSON.stringify(updatedMessages));\r\n      \r\n      // Mesajı veritabanına kaydet - eğer bir konuşma mevcutsa\r\n      if (activeConversationId) {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n          \r\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              content: messageText,\r\n              role: 'user'\r\n            })\r\n          });\r\n          \r\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              content: responseText,\r\n              role: 'assistant'\r\n            })\r\n          });\r\n        } catch (error) {\r\n          console.error('Error saving messages to database:', error);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        text: `Yanıt verilemiyor, lütfen tekrar deneyin. Hata: ${error.message}`,\r\n        sender: 'bot',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const updatedMessages = [...messages, userMessage, errorMessage];\r\n      setMessages(updatedMessages);\r\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\r\n    }\r\n  };\r\n\r\n  const clearChat = async () => {\r\n    try {\r\n      // Backend ile deneme\r\n      if (user && selectedModel && activeConversationId) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        };\r\n        \r\n        // Aktif konuşmanın mesajlarını temizle\r\n        await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\r\n          method: 'DELETE',\r\n          headers,\r\n        });\r\n      } else if (user && selectedModel) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = {\r\n          'Content-Type': 'application/json',\r\n        };\r\n        \r\n        if (token) {\r\n          headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        \r\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\r\n        await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\r\n          method: 'DELETE',\r\n          headers,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing chat history from backend:', error);\r\n    }\r\n    \r\n    // Clear local state and storage\r\n    setMessages([]);\r\n    const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n    localStorage.removeItem(`${modelKey}_messages`);\r\n  };\r\n\r\n  const selectModel = (model) => {\r\n    setSelectedModel(model);\r\n    setShowModelSelector(false);\r\n  };\r\n\r\n  const resetModelSelection = () => {\r\n    setSelectedModel(null);\r\n    setShowModelSelector(true);\r\n    setMessages([]);\r\n    setActiveConversationId(null);\r\n  };\r\n\r\n  // If not logged in, show auth page\r\n  if (!user) {\r\n    return <AuthPage onAuthSuccess={handleAuthSuccess} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {showModelSelector ? (\r\n        <ModelSelector onSelectModel={selectModel} />\r\n      ) : selectedModel ? (\r\n        <>\r\n          <Sidebar\r\n            toggleTheme={toggleTheme}\r\n            theme={theme}\r\n            clearChat={clearChat}\r\n            resetModelSelection={resetModelSelection}\r\n            selectedModel={selectedModel}\r\n            messages={messages}\r\n            onSendMessage={handleSendMessage}\r\n            fetchChatHistory={fetchChatHistory}\r\n            user={user}\r\n          >\r\n            <UserProfile user={user} onLogout={handleLogout} />\r\n          </Sidebar>\r\n          <ChatArea\r\n            messages={messages}\r\n            onSendMessage={handleSendMessage}\r\n            theme={theme}\r\n            isLoading={isLoading}\r\n          />\r\n        </>\r\n      ) : (\r\n        <ModelSelector onSelectModel={selectModel} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}