{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali\\\\Desktop\\\\SonVersiyon\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport ChatArea from './components/ChatArea';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport ModelSelector from './components/ModelSelector';\nimport AuthPage from './components/Auth/AuthPage';\nimport UserProfile from './components/UserProfile/UserProfile';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const [messages, setMessages] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [showModelSelector, setShowModelSelector] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  const [chats, setChats] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('darkMode') === 'true');\n\n  // API anahtarı (normalde bu istemci tarafında saklanmamalıdır - sadece demo amaçlıdır)\n  const DEEPSEEK_API_KEY = \"sk-7088c20707b64f51a324057b6d7aa85e\";\n  useEffect(() => {\n    document.body.className = `${theme}-theme`;\n  }, [theme]);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    const storedChats = localStorage.getItem('chats');\n    if (storedChats) {\n      setChats(JSON.parse(storedChats));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('darkMode', isDarkMode);\n    document.body.classList.toggle('dark-mode', isDarkMode);\n  }, [isDarkMode]);\n  useEffect(() => {\n    // Fetch chat history when user selects a model\n    if (user && selectedModel) {\n      fetchChatHistory(selectedModel);\n    }\n  }, [user, selectedModel]);\n  const fetchChatHistory = async (model, conversationId) => {\n    if (!user) return;\n    setIsLoading(true);\n    setActiveConversationId(conversationId);\n    try {\n      // Önce backend API ile deneyelim\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n        console.log('Sending request with token:', token);\n      }\n      const modelType = model === 'api' ? 'api' : 'custom';\n      let endpoint = `http://localhost:8000/api/chat-history?model=${modelType}`;\n\n      // Eğer conversationId belirtilmişse, belirli bir konuşmaya ait mesajları getir\n      if (conversationId) {\n        endpoint = `http://localhost:8000/api/conversations/${conversationId}/messages`;\n      }\n      const response = await fetch(endpoint, {\n        headers\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Error response:', response.status, errorData);\n        throw new Error(`Failed to fetch chat history: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // API'den dönen mesajları formatla\n      const formattedMessages = data.messages ? data.messages : data.map(msg => ({\n        id: msg.id,\n        text: msg.content,\n        sender: msg.role === 'user' ? 'user' : 'bot',\n        timestamp: msg.timestamp || new Date().toISOString()\n      }));\n      setMessages(formattedMessages || []);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      // Backend çalışmıyorsa localStorage'dan yükle\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n      const storedMessages = localStorage.getItem(`${modelKey}_messages`);\n      if (storedMessages) {\n        try {\n          setMessages(JSON.parse(storedMessages));\n        } catch (e) {\n          console.error('Error parsing stored messages:', e);\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n  const handleAuthSuccess = userData => {\n    setUser(userData);\n\n    // Token'ı localStorage'a kaydet\n    if (userData && userData.token) {\n      localStorage.setItem('token', userData.token);\n      console.log('Token saved to localStorage:', userData.token);\n    } else {\n      console.error('Token missing in user data:', userData);\n    }\n\n    // After authentication, show model selector\n    setShowModelSelector(true);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('chats');\n\n    // Tüm modellerin mesajlarını temizle\n    localStorage.removeItem('api_messages');\n    localStorage.removeItem('custom_messages');\n    setUser(null);\n    setMessages([]);\n    setSelectedModel(null);\n    setShowModelSelector(false);\n    setActiveConversationId(null);\n    setChats([]);\n    setActiveChat(null);\n  };\n  const handleUpdateUser = updatedUser => {\n    setUser(updatedUser);\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n  };\n\n  // DeepSeek API'sini kullanarak matematiksel soruları çözme\n  const callDeepSeekAPI = async query => {\n    try {\n      console.log('Calling Math.js API with query:', query);\n\n      // Doğrudan demo endpoint'e istek yap (kimlik doğrulama gerektirmez)\n      const demoResponse = await fetch('http://localhost:8000/api/deepseek-solver-demo', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: query\n        })\n      });\n      if (!demoResponse.ok) {\n        console.error('Demo endpoint error:', demoResponse.status);\n        const errorText = await demoResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error(`Demo API hatası: ${demoResponse.status}`);\n      }\n      const data = await demoResponse.json();\n      console.log('Math.js API success:', data);\n      return data.response;\n    } catch (error) {\n      console.error('Math.js API error:', error);\n\n      // Son çare olarak basit matematik modelini kullan\n      return simpleMathModel(query);\n    }\n  };\n\n  // Demo matematik modeli (basit işlemler için)\n  const simpleMathModel = message => {\n    try {\n      // Basit matematik işlemleri için\n      if (/[0-9+\\-*/()^. ]/.test(message) && /[+\\-*/^]/.test(message)) {\n        try {\n          // eslint-disable-next-line no-eval\n          const result = eval(message.replace('^', '**'));\n          return `${message} = ${result}`;\n        } catch (e) {\n          return `Matematik sorunuzu anlayamadım. Lütfen başka bir şekilde sorun.`;\n        }\n      }\n      const lowerMsg = message.toLowerCase();\n      if (lowerMsg.includes('toplama') || lowerMsg.includes('topla')) {\n        return 'Toplama işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 5 + 3';\n      }\n      if (lowerMsg.includes('çıkarma') || lowerMsg.includes('çıkar')) {\n        return 'Çıkarma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 10 - 4';\n      }\n      if (lowerMsg.includes('çarpma') || lowerMsg.includes('çarp')) {\n        return 'Çarpma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 6 * 7';\n      }\n      if (lowerMsg.includes('bölme') || lowerMsg.includes('böl')) {\n        return 'Bölme işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 20 / 5';\n      }\n      if (lowerMsg.includes('kare') || lowerMsg.includes('üssü')) {\n        return 'Üs alma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 2^3 veya 5^2';\n      }\n      if (lowerMsg.includes('türev') || lowerMsg.includes('integral') || lowerMsg.includes('limit') || lowerMsg.includes('denklem')) {\n        return `Bu tür karmaşık matematik soruları için doğrudan sorunuzu yazabilirsiniz. Örneğin: \"türev x^2\" veya \"integral sin(x)\".`;\n      }\n      return `Matematik sorunuz: \"${message}\" anlaşılamadı. Lütfen doğrudan matematik işlemini yazın. Örnek: 5 + 3, 10 - 2, 4 * 7, 20 / 5, 2^3, türev x^2, integral sin(x)`;\n    } catch (e) {\n      return `Bir hata oluştu: ${e.message}`;\n    }\n  };\n\n  // Demo chatbot - API olmadan demo yanıtlar üreten fonksiyon\n  const demoChatbot = message => {\n    const lowerMsg = message.toLowerCase();\n    if (lowerMsg.includes('merhaba') || lowerMsg.includes('selam')) {\n      return 'Merhaba! Size nasıl yardımcı olabilirim?';\n    }\n    if (lowerMsg.includes('nasılsın')) {\n      return 'Teşekkür ederim, ben bir AI asistanım. Duygularım yok ama size yardımcı olmaktan memnuniyet duyarım!';\n    }\n    if (lowerMsg.includes('hava') && (lowerMsg.includes('nasıl') || lowerMsg.includes('durumu'))) {\n      return 'Üzgünüm, gerçek zamanlı hava durumu verilerine erişimim yok. Ancak güvenilir bir hava durumu uygulaması veya sitesi kullanmanızı öneririm.';\n    }\n    if (lowerMsg.includes('yemek') || lowerMsg.includes('tarif')) {\n      return 'Yemek tarifleri konusunda size yardımcı olabilirim. Ne tür bir yemek yapmak istiyorsunuz?';\n    }\n    if (lowerMsg.includes('film') || lowerMsg.includes('öneri')) {\n      return 'Film önerisi istiyorsanız, son zamanlarda çıkan popüler filmler: \"Dune\", \"No Time to Die\", \"The French Dispatch\". Ne tür filmlerden hoşlanırsınız?';\n    }\n    if (lowerMsg.includes('kitap')) {\n      return 'Kitap önerileri için önce hangi türleri sevdiğinizi bilmem gerekiyor. Roman, bilim kurgu, fantastik, tarih veya kişisel gelişim kitapları hakkında konuşabiliriz.';\n    }\n    if (lowerMsg.includes('kod') || lowerMsg.includes('programlama') || lowerMsg.includes('yazılım')) {\n      return 'Programlama hakkında sorularınız varsa, hangi dil veya framework ile ilgilendiğinizi belirtirseniz daha spesifik yardım sağlayabilirim.';\n    }\n    if (lowerMsg.includes('teşekkür')) {\n      return 'Rica ederim! Başka bir sorunuz olursa yardımcı olmaktan memnuniyet duyarım.';\n    }\n    if (lowerMsg.length < 5) {\n      return 'Daha ayrıntılı bir şey sorar mısınız? Size daha iyi yardımcı olabilirim.';\n    }\n\n    // Genel yanıt\n    return `\"${message}\" hakkında yardımcı olmak isterim. Lütfen sorularınızı detaylandırırsanız daha iyi cevaplar verebilirim.`;\n  };\n\n  // Matematiksel sorgunun türünü belirle\n  const isMathQuery = query => {\n    const mathKeywords = ['türev', 'integral', 'limit', 'denklem', 'çöz', 'hesapla', 'derivative', 'integrate', 'solve', 'equation', 'calculate', 'kök', 'faktör', 'simplify', 'expand'];\n    const mathRegex = /[0-9+\\-*/()^.=<>√∫∂∑π]/;\n    const lowerQuery = query.toLowerCase();\n\n    // Matematik anahtar kelimesi içeriyor mu?\n    const hasMathKeyword = mathKeywords.some(keyword => lowerQuery.includes(keyword));\n\n    // Matematik sembolü veya sayı içeriyor mu?\n    const hasMathSymbol = mathRegex.test(query);\n    return hasMathKeyword || hasMathSymbol;\n  };\n  const handleSendMessage = async messageText => {\n    if (!messageText.trim()) return;\n\n    // Add user message to the chat\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      let responseText;\n\n      // Gelen mesajın matematik sorusu olup olmadığını kontrol et\n      if (selectedModel === 'custom' || selectedModel === 'api' && isMathQuery(messageText)) {\n        // Matematik sorularını DeepSeek API ile çöz\n        responseText = await callDeepSeekAPI(messageText);\n      } else {\n        // Sohbet soruları için demo chatbot kullan\n        responseText = demoChatbot(messageText);\n      }\n\n      // Add bot response to chat\n      const botMessage = {\n        id: Date.now() + 1,\n        text: responseText,\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      };\n      const updatedMessages = [...messages, userMessage, botMessage];\n      setMessages(updatedMessages);\n\n      // Save to local storage\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n      localStorage.setItem(`${modelKey}_messages`, JSON.stringify(updatedMessages));\n\n      // Mesajı veritabanına kaydet - eğer bir konuşma mevcutsa\n      if (activeConversationId) {\n        try {\n          const token = localStorage.getItem('token');\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              content: messageText,\n              role: 'user'\n            })\n          });\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              content: responseText,\n              role: 'assistant'\n            })\n          });\n        } catch (error) {\n          console.error('Error saving messages to database:', error);\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: `Yanıt verilemiyor, lütfen tekrar deneyin. Hata: ${error.message}`,\n        sender: 'bot',\n        isError: true,\n        timestamp: new Date().toISOString()\n      };\n      const updatedMessages = [...messages, userMessage, errorMessage];\n      setMessages(updatedMessages);\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\n    }\n  };\n  const clearChat = async () => {\n    try {\n      // Backend ile deneme\n      if (user && selectedModel && activeConversationId) {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        };\n\n        // Aktif konuşmanın mesajlarını temizle\n        await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\n          method: 'DELETE',\n          headers\n        });\n      } else if (user && selectedModel) {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json'\n        };\n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\n        await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\n          method: 'DELETE',\n          headers\n        });\n      }\n    } catch (error) {\n      console.error('Error clearing chat history from backend:', error);\n    }\n\n    // Clear local state and storage\n    setMessages([]);\n    const modelKey = selectedModel === 'api' ? 'api' : 'custom';\n    localStorage.removeItem(`${modelKey}_messages`);\n  };\n  const selectModel = model => {\n    setSelectedModel(model);\n    setShowModelSelector(false);\n  };\n  const resetModelSelection = () => {\n    setSelectedModel(null);\n    setShowModelSelector(true);\n    setMessages([]);\n    setActiveConversationId(null);\n  };\n  const handleNewChat = async () => {\n    const newChat = {\n      id: Date.now().toString(),\n      title: 'Yeni Sohbet',\n      messages: [],\n      createdAt: new Date().toISOString()\n    };\n    try {\n      const response = await fetch('/api/chats', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify(newChat)\n      });\n      if (response.ok) {\n        const savedChat = await response.json();\n        setChats([savedChat, ...chats]);\n        setActiveChat(savedChat);\n        localStorage.setItem('chats', JSON.stringify([savedChat, ...chats]));\n      }\n    } catch (err) {\n      console.error('Error creating new chat:', err);\n      // Fallback to local storage in demo mode\n      setChats([newChat, ...chats]);\n      setActiveChat(newChat);\n      localStorage.setItem('chats', JSON.stringify([newChat, ...chats]));\n    }\n  };\n  const handleDeleteChat = async chatId => {\n    try {\n      const response = await fetch(`/api/chats/${chatId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (response.ok) {\n        const updatedChats = chats.filter(chat => chat.id !== chatId);\n        setChats(updatedChats);\n        if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.id) === chatId) {\n          setActiveChat(null);\n        }\n        localStorage.setItem('chats', JSON.stringify(updatedChats));\n      }\n    } catch (err) {\n      console.error('Error deleting chat:', err);\n      // Fallback to local storage in demo mode\n      const updatedChats = chats.filter(chat => chat.id !== chatId);\n      setChats(updatedChats);\n      if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.id) === chatId) {\n        setActiveChat(null);\n      }\n      localStorage.setItem('chats', JSON.stringify(updatedChats));\n    }\n  };\n\n  // If not logged in, show auth page\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `app ${isDarkMode ? 'dark' : 'light'}`,\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            element: /*#__PURE__*/_jsxDEV(Login, {\n              onLogin: handleAuthSuccess,\n              isDarkMode: isDarkMode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/register\",\n            element: /*#__PURE__*/_jsxDEV(Register, {\n              onLogin: handleAuthSuccess,\n              isDarkMode: isDarkMode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(AuthPage, {\n              onAuthSuccess: handleAuthSuccess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `app ${isDarkMode ? 'dark' : 'light'}`,\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/profile\",\n          element: /*#__PURE__*/_jsxDEV(UserProfile, {\n            user: user,\n            onLogout: handleLogout,\n            onUpdateUser: handleUpdateUser,\n            isDarkMode: isDarkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main-container\",\n            children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n              chats: chats,\n              activeChat: activeChat,\n              onChatSelect: setActiveChat,\n              onNewChat: handleNewChat,\n              onDeleteChat: handleDeleteChat,\n              isDarkMode: isDarkMode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-container\",\n              children: showModelSelector ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n                onSelectModel: selectModel\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 21\n              }, this) : selectedModel ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(ChatArea, {\n                  messages: messages,\n                  onSendMessage: handleSendMessage,\n                  theme: theme,\n                  isLoading: isLoading\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false) : /*#__PURE__*/_jsxDEV(ModelSelector, {\n                onSelectModel: selectModel\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 580,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7qzU0t9ISUfpYmu+QQsdlbO2xJI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","ChatArea","Sidebar","ModelSelector","AuthPage","UserProfile","Login","Register","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","theme","setTheme","messages","setMessages","selectedModel","setSelectedModel","showModelSelector","setShowModelSelector","user","setUser","isLoading","setIsLoading","activeConversationId","setActiveConversationId","chats","setChats","activeChat","setActiveChat","isDarkMode","setIsDarkMode","localStorage","getItem","DEEPSEEK_API_KEY","document","body","className","storedUser","JSON","parse","storedChats","setItem","classList","toggle","fetchChatHistory","model","conversationId","token","headers","console","log","modelType","endpoint","response","fetch","ok","errorData","json","catch","error","status","Error","data","formattedMessages","map","msg","id","text","content","sender","role","timestamp","Date","toISOString","modelKey","storedMessages","e","toggleTheme","handleAuthSuccess","userData","handleLogout","removeItem","handleUpdateUser","updatedUser","stringify","callDeepSeekAPI","query","demoResponse","method","message","errorText","simpleMathModel","test","result","eval","replace","lowerMsg","toLowerCase","includes","demoChatbot","length","isMathQuery","mathKeywords","mathRegex","lowerQuery","hasMathKeyword","some","keyword","hasMathSymbol","handleSendMessage","messageText","trim","userMessage","now","prevMessages","responseText","botMessage","updatedMessages","errorMessage","isError","clearChat","selectModel","resetModelSelection","handleNewChat","newChat","toString","title","createdAt","savedChat","err","handleDeleteChat","chatId","updatedChats","filter","chat","children","path","element","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onAuthSuccess","onLogout","onUpdateUser","onChatSelect","onNewChat","onDeleteChat","onSelectModel","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/ali/Desktop/SonVersiyon/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport './App.css';\r\nimport ChatArea from './components/ChatArea';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\nimport ModelSelector from './components/ModelSelector';\r\nimport AuthPage from './components/Auth/AuthPage';\r\nimport UserProfile from './components/UserProfile/UserProfile';\r\nimport Login from './components/Auth/Login';\r\nimport Register from './components/Auth/Register';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [showModelSelector, setShowModelSelector] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [activeConversationId, setActiveConversationId] = useState(null);\r\n  const [chats, setChats] = useState([]);\r\n  const [activeChat, setActiveChat] = useState(null);\r\n  const [isDarkMode, setIsDarkMode] = useState(\r\n    localStorage.getItem('darkMode') === 'true'\r\n  );\r\n\r\n  // API anahtarı (normalde bu istemci tarafında saklanmamalıdır - sadece demo amaçlıdır)\r\n  const DEEPSEEK_API_KEY = \"sk-7088c20707b64f51a324057b6d7aa85e\";\r\n\r\n  useEffect(() => {\r\n    document.body.className = `${theme}-theme`;\r\n  }, [theme]);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n\r\n    const storedChats = localStorage.getItem('chats');\r\n    if (storedChats) {\r\n      setChats(JSON.parse(storedChats));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('darkMode', isDarkMode);\r\n    document.body.classList.toggle('dark-mode', isDarkMode);\r\n  }, [isDarkMode]);\r\n\r\n  useEffect(() => {\r\n    // Fetch chat history when user selects a model\r\n    if (user && selectedModel) {\r\n      fetchChatHistory(selectedModel);\r\n    }\r\n  }, [user, selectedModel]);\r\n\r\n  const fetchChatHistory = async (model, conversationId) => {\r\n    if (!user) return;\r\n    \r\n    setIsLoading(true);\r\n    setActiveConversationId(conversationId);\r\n    \r\n    try {\r\n      // Önce backend API ile deneyelim\r\n      const token = localStorage.getItem('token');\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n        console.log('Sending request with token:', token);\r\n      }\r\n      \r\n      const modelType = model === 'api' ? 'api' : 'custom';\r\n      let endpoint = `http://localhost:8000/api/chat-history?model=${modelType}`;\r\n      \r\n      // Eğer conversationId belirtilmişse, belirli bir konuşmaya ait mesajları getir\r\n      if (conversationId) {\r\n        endpoint = `http://localhost:8000/api/conversations/${conversationId}/messages`;\r\n      }\r\n      \r\n      const response = await fetch(endpoint, {\r\n        headers,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Error response:', response.status, errorData);\r\n        throw new Error(`Failed to fetch chat history: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // API'den dönen mesajları formatla\r\n      const formattedMessages = data.messages ? data.messages : data.map(msg => ({\r\n        id: msg.id,\r\n        text: msg.content,\r\n        sender: msg.role === 'user' ? 'user' : 'bot',\r\n        timestamp: msg.timestamp || new Date().toISOString()\r\n      }));\r\n      \r\n      setMessages(formattedMessages || []);\r\n    } catch (error) {\r\n      console.error('Error fetching chat history:', error);\r\n      // Backend çalışmıyorsa localStorage'dan yükle\r\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n      const storedMessages = localStorage.getItem(`${modelKey}_messages`);\r\n      if (storedMessages) {\r\n        try {\r\n          setMessages(JSON.parse(storedMessages));\r\n        } catch (e) {\r\n          console.error('Error parsing stored messages:', e);\r\n        }\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const handleAuthSuccess = (userData) => {\r\n    setUser(userData);\r\n    \r\n    // Token'ı localStorage'a kaydet\r\n    if (userData && userData.token) {\r\n      localStorage.setItem('token', userData.token);\r\n      console.log('Token saved to localStorage:', userData.token);\r\n    } else {\r\n      console.error('Token missing in user data:', userData);\r\n    }\r\n    \r\n    // After authentication, show model selector\r\n    setShowModelSelector(true);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('chats');\r\n    \r\n    // Tüm modellerin mesajlarını temizle\r\n    localStorage.removeItem('api_messages');\r\n    localStorage.removeItem('custom_messages');\r\n    \r\n    setUser(null);\r\n    setMessages([]);\r\n    setSelectedModel(null);\r\n    setShowModelSelector(false);\r\n    setActiveConversationId(null);\r\n    setChats([]);\r\n    setActiveChat(null);\r\n  };\r\n\r\n  const handleUpdateUser = (updatedUser) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n  };\r\n\r\n  // DeepSeek API'sini kullanarak matematiksel soruları çözme\r\n  const callDeepSeekAPI = async (query) => {\r\n    try {\r\n      console.log('Calling Math.js API with query:', query);\r\n      \r\n      // Doğrudan demo endpoint'e istek yap (kimlik doğrulama gerektirmez)\r\n      const demoResponse = await fetch('http://localhost:8000/api/deepseek-solver-demo', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ message: query })\r\n      });\r\n      \r\n      if (!demoResponse.ok) {\r\n        console.error('Demo endpoint error:', demoResponse.status);\r\n        const errorText = await demoResponse.text();\r\n        console.error('Error response:', errorText);\r\n        throw new Error(`Demo API hatası: ${demoResponse.status}`);\r\n      }\r\n      \r\n      const data = await demoResponse.json();\r\n      console.log('Math.js API success:', data);\r\n      return data.response;\r\n    } catch (error) {\r\n      console.error('Math.js API error:', error);\r\n      \r\n      // Son çare olarak basit matematik modelini kullan\r\n      return simpleMathModel(query);\r\n    }\r\n  };\r\n\r\n  // Demo matematik modeli (basit işlemler için)\r\n  const simpleMathModel = (message) => {\r\n    try {\r\n      // Basit matematik işlemleri için\r\n      if (/[0-9+\\-*/()^. ]/.test(message) && /[+\\-*/^]/.test(message)) {\r\n        try {\r\n          // eslint-disable-next-line no-eval\r\n          const result = eval(message.replace('^', '**'));\r\n          return `${message} = ${result}`;\r\n        } catch (e) {\r\n          return `Matematik sorunuzu anlayamadım. Lütfen başka bir şekilde sorun.`;\r\n        }\r\n      }\r\n      \r\n      const lowerMsg = message.toLowerCase();\r\n      \r\n      if (lowerMsg.includes('toplama') || lowerMsg.includes('topla')) {\r\n        return 'Toplama işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 5 + 3';\r\n      }\r\n      \r\n      if (lowerMsg.includes('çıkarma') || lowerMsg.includes('çıkar')) {\r\n        return 'Çıkarma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 10 - 4';\r\n      }\r\n      \r\n      if (lowerMsg.includes('çarpma') || lowerMsg.includes('çarp')) {\r\n        return 'Çarpma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 6 * 7';\r\n      }\r\n      \r\n      if (lowerMsg.includes('bölme') || lowerMsg.includes('böl')) {\r\n        return 'Bölme işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 20 / 5';\r\n      }\r\n      \r\n      if (lowerMsg.includes('kare') || lowerMsg.includes('üssü')) {\r\n        return 'Üs alma işlemi için doğrudan sayıları yazabilirsiniz. Örnek: 2^3 veya 5^2';\r\n      }\r\n      \r\n      if (lowerMsg.includes('türev') || lowerMsg.includes('integral') || \r\n          lowerMsg.includes('limit') || lowerMsg.includes('denklem')) {\r\n        return `Bu tür karmaşık matematik soruları için doğrudan sorunuzu yazabilirsiniz. Örneğin: \"türev x^2\" veya \"integral sin(x)\".`;\r\n      }\r\n      \r\n      return `Matematik sorunuz: \"${message}\" anlaşılamadı. Lütfen doğrudan matematik işlemini yazın. Örnek: 5 + 3, 10 - 2, 4 * 7, 20 / 5, 2^3, türev x^2, integral sin(x)`;\r\n    } catch (e) {\r\n      return `Bir hata oluştu: ${e.message}`;\r\n    }\r\n  };\r\n\r\n  // Demo chatbot - API olmadan demo yanıtlar üreten fonksiyon\r\n  const demoChatbot = (message) => {\r\n    const lowerMsg = message.toLowerCase();\r\n    \r\n    if (lowerMsg.includes('merhaba') || lowerMsg.includes('selam')) {\r\n      return 'Merhaba! Size nasıl yardımcı olabilirim?';\r\n    }\r\n    \r\n    if (lowerMsg.includes('nasılsın')) {\r\n      return 'Teşekkür ederim, ben bir AI asistanım. Duygularım yok ama size yardımcı olmaktan memnuniyet duyarım!';\r\n    }\r\n    \r\n    if (lowerMsg.includes('hava') && (lowerMsg.includes('nasıl') || lowerMsg.includes('durumu'))) {\r\n      return 'Üzgünüm, gerçek zamanlı hava durumu verilerine erişimim yok. Ancak güvenilir bir hava durumu uygulaması veya sitesi kullanmanızı öneririm.';\r\n    }\r\n    \r\n    if (lowerMsg.includes('yemek') || lowerMsg.includes('tarif')) {\r\n      return 'Yemek tarifleri konusunda size yardımcı olabilirim. Ne tür bir yemek yapmak istiyorsunuz?';\r\n    }\r\n    \r\n    if (lowerMsg.includes('film') || lowerMsg.includes('öneri')) {\r\n      return 'Film önerisi istiyorsanız, son zamanlarda çıkan popüler filmler: \"Dune\", \"No Time to Die\", \"The French Dispatch\". Ne tür filmlerden hoşlanırsınız?';\r\n    }\r\n    \r\n    if (lowerMsg.includes('kitap')) {\r\n      return 'Kitap önerileri için önce hangi türleri sevdiğinizi bilmem gerekiyor. Roman, bilim kurgu, fantastik, tarih veya kişisel gelişim kitapları hakkında konuşabiliriz.';\r\n    }\r\n    \r\n    if (lowerMsg.includes('kod') || lowerMsg.includes('programlama') || lowerMsg.includes('yazılım')) {\r\n      return 'Programlama hakkında sorularınız varsa, hangi dil veya framework ile ilgilendiğinizi belirtirseniz daha spesifik yardım sağlayabilirim.';\r\n    }\r\n    \r\n    if (lowerMsg.includes('teşekkür')) {\r\n      return 'Rica ederim! Başka bir sorunuz olursa yardımcı olmaktan memnuniyet duyarım.';\r\n    }\r\n    \r\n    if (lowerMsg.length < 5) {\r\n      return 'Daha ayrıntılı bir şey sorar mısınız? Size daha iyi yardımcı olabilirim.';\r\n    }\r\n    \r\n    // Genel yanıt\r\n    return `\"${message}\" hakkında yardımcı olmak isterim. Lütfen sorularınızı detaylandırırsanız daha iyi cevaplar verebilirim.`;\r\n  };\r\n\r\n  // Matematiksel sorgunun türünü belirle\r\n  const isMathQuery = (query) => {\r\n    const mathKeywords = ['türev', 'integral', 'limit', 'denklem', 'çöz', 'hesapla', \r\n                          'derivative', 'integrate', 'solve', 'equation', 'calculate', \r\n                          'kök', 'faktör', 'simplify', 'expand'];\r\n    \r\n    const mathRegex = /[0-9+\\-*/()^.=<>√∫∂∑π]/;\r\n    \r\n    const lowerQuery = query.toLowerCase();\r\n    \r\n    // Matematik anahtar kelimesi içeriyor mu?\r\n    const hasMathKeyword = mathKeywords.some(keyword => lowerQuery.includes(keyword));\r\n    \r\n    // Matematik sembolü veya sayı içeriyor mu?\r\n    const hasMathSymbol = mathRegex.test(query);\r\n    \r\n    return hasMathKeyword || hasMathSymbol;\r\n  };\r\n\r\n  const handleSendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n\r\n    // Add user message to the chat\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: messageText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n\r\n    try {\r\n      let responseText;\r\n\r\n      // Gelen mesajın matematik sorusu olup olmadığını kontrol et\r\n      if (selectedModel === 'custom' || (selectedModel === 'api' && isMathQuery(messageText))) {\r\n        // Matematik sorularını DeepSeek API ile çöz\r\n        responseText = await callDeepSeekAPI(messageText);\r\n      } else {\r\n        // Sohbet soruları için demo chatbot kullan\r\n        responseText = demoChatbot(messageText);\r\n      }\r\n      \r\n      // Add bot response to chat\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: responseText,\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const updatedMessages = [...messages, userMessage, botMessage];\r\n      setMessages(updatedMessages);\r\n      \r\n      // Save to local storage\r\n      const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n      localStorage.setItem(`${modelKey}_messages`, JSON.stringify(updatedMessages));\r\n      \r\n      // Mesajı veritabanına kaydet - eğer bir konuşma mevcutsa\r\n      if (activeConversationId) {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n          \r\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              content: messageText,\r\n              role: 'user'\r\n            })\r\n          });\r\n          \r\n          await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              content: responseText,\r\n              role: 'assistant'\r\n            })\r\n          });\r\n        } catch (error) {\r\n          console.error('Error saving messages to database:', error);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        text: `Yanıt verilemiyor, lütfen tekrar deneyin. Hata: ${error.message}`,\r\n        sender: 'bot',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const updatedMessages = [...messages, userMessage, errorMessage];\r\n      setMessages(updatedMessages);\r\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\r\n    }\r\n  };\r\n\r\n  const clearChat = async () => {\r\n    try {\r\n      // Backend ile deneme\r\n      if (user && selectedModel && activeConversationId) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        };\r\n        \r\n        // Aktif konuşmanın mesajlarını temizle\r\n        await fetch(`http://localhost:8000/api/conversations/${activeConversationId}/messages`, {\r\n          method: 'DELETE',\r\n          headers,\r\n        });\r\n      } else if (user && selectedModel) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = {\r\n          'Content-Type': 'application/json',\r\n        };\r\n        \r\n        if (token) {\r\n          headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        \r\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\r\n        await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\r\n          method: 'DELETE',\r\n          headers,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing chat history from backend:', error);\r\n    }\r\n    \r\n    // Clear local state and storage\r\n    setMessages([]);\r\n    const modelKey = selectedModel === 'api' ? 'api' : 'custom';\r\n    localStorage.removeItem(`${modelKey}_messages`);\r\n  };\r\n\r\n  const selectModel = (model) => {\r\n    setSelectedModel(model);\r\n    setShowModelSelector(false);\r\n  };\r\n\r\n  const resetModelSelection = () => {\r\n    setSelectedModel(null);\r\n    setShowModelSelector(true);\r\n    setMessages([]);\r\n    setActiveConversationId(null);\r\n  };\r\n\r\n  const handleNewChat = async () => {\r\n    const newChat = {\r\n      id: Date.now().toString(),\r\n      title: 'Yeni Sohbet',\r\n      messages: [],\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('/api/chats', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(newChat)\r\n      });\r\n\r\n      if (response.ok) {\r\n        const savedChat = await response.json();\r\n        setChats([savedChat, ...chats]);\r\n        setActiveChat(savedChat);\r\n        localStorage.setItem('chats', JSON.stringify([savedChat, ...chats]));\r\n      }\r\n    } catch (err) {\r\n      console.error('Error creating new chat:', err);\r\n      // Fallback to local storage in demo mode\r\n      setChats([newChat, ...chats]);\r\n      setActiveChat(newChat);\r\n      localStorage.setItem('chats', JSON.stringify([newChat, ...chats]));\r\n    }\r\n  };\r\n\r\n  const handleDeleteChat = async (chatId) => {\r\n    try {\r\n      const response = await fetch(`/api/chats/${chatId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const updatedChats = chats.filter(chat => chat.id !== chatId);\r\n        setChats(updatedChats);\r\n        if (activeChat?.id === chatId) {\r\n          setActiveChat(null);\r\n        }\r\n        localStorage.setItem('chats', JSON.stringify(updatedChats));\r\n      }\r\n    } catch (err) {\r\n      console.error('Error deleting chat:', err);\r\n      // Fallback to local storage in demo mode\r\n      const updatedChats = chats.filter(chat => chat.id !== chatId);\r\n      setChats(updatedChats);\r\n      if (activeChat?.id === chatId) {\r\n        setActiveChat(null);\r\n      }\r\n      localStorage.setItem('chats', JSON.stringify(updatedChats));\r\n    }\r\n  };\r\n\r\n  // If not logged in, show auth page\r\n  if (!user) {\r\n    return (\r\n      <Router>\r\n        <div className={`app ${isDarkMode ? 'dark' : 'light'}`}>\r\n          <Routes>\r\n            <Route\r\n              path=\"/login\"\r\n              element={\r\n                <Login onLogin={handleAuthSuccess} isDarkMode={isDarkMode} />\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/register\"\r\n              element={\r\n                <Register onLogin={handleAuthSuccess} isDarkMode={isDarkMode} />\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/\"\r\n              element={\r\n                <AuthPage onAuthSuccess={handleAuthSuccess} />\r\n              }\r\n            />\r\n          </Routes>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className={`app ${isDarkMode ? 'dark' : 'light'}`}>\r\n        <Routes>\r\n          <Route\r\n            path=\"/profile\"\r\n            element={\r\n              <UserProfile\r\n                user={user}\r\n                onLogout={handleLogout}\r\n                onUpdateUser={handleUpdateUser}\r\n                isDarkMode={isDarkMode}\r\n              />\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/\"\r\n            element={\r\n              <div className=\"main-container\">\r\n                <Sidebar\r\n                  chats={chats}\r\n                  activeChat={activeChat}\r\n                  onChatSelect={setActiveChat}\r\n                  onNewChat={handleNewChat}\r\n                  onDeleteChat={handleDeleteChat}\r\n                  isDarkMode={isDarkMode}\r\n                />\r\n                <div className=\"chat-container\">\r\n                  {showModelSelector ? (\r\n                    <ModelSelector onSelectModel={selectModel} />\r\n                  ) : selectedModel ? (\r\n                    <>\r\n                      <ChatArea\r\n                        messages={messages}\r\n                        onSendMessage={handleSendMessage}\r\n                        theme={theme}\r\n                        isLoading={isLoading}\r\n                      />\r\n                    </>\r\n                  ) : (\r\n                    <ModelSelector onSelectModel={selectModel} />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            }\r\n          />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,WAAW,MAAM,sCAAsC;AAC9D,OAAOC,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,QAAQ,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,OAAO,CAAC;EAC3C,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC0B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC4B,IAAI,EAAEC,OAAO,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAM,CAACkC,KAAK,EAAEC,QAAQ,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACsC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAC1CwC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,MACvC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAG,qCAAqC;EAE9DzC,SAAS,CAAC,MAAM;IACd0C,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAG,GAAGzB,KAAK,QAAQ;EAC5C,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEXnB,SAAS,CAAC,MAAM;IACd,MAAM6C,UAAU,GAAGN,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIK,UAAU,EAAE;MACdjB,OAAO,CAACkB,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;IACjC;IAEA,MAAMG,WAAW,GAAGT,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIQ,WAAW,EAAE;MACfd,QAAQ,CAACY,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC;EAENhD,SAAS,CAAC,MAAM;IACduC,YAAY,CAACU,OAAO,CAAC,UAAU,EAAEZ,UAAU,CAAC;IAC5CK,QAAQ,CAACC,IAAI,CAACO,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEd,UAAU,CAAC;EACzD,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhBrC,SAAS,CAAC,MAAM;IACd;IACA,IAAI2B,IAAI,IAAIJ,aAAa,EAAE;MACzB6B,gBAAgB,CAAC7B,aAAa,CAAC;IACjC;EACF,CAAC,EAAE,CAACI,IAAI,EAAEJ,aAAa,CAAC,CAAC;EAEzB,MAAM6B,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,cAAc,KAAK;IACxD,IAAI,CAAC3B,IAAI,EAAE;IAEXG,YAAY,CAAC,IAAI,CAAC;IAClBE,uBAAuB,CAACsB,cAAc,CAAC;IAEvC,IAAI;MACF;MACA,MAAMC,KAAK,GAAGhB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMgB,OAAO,GAAG;QACd,cAAc,EAAE;MAClB,CAAC;MAED,IAAID,KAAK,EAAE;QACTC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;QAC5CE,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEH,KAAK,CAAC;MACnD;MAEA,MAAMI,SAAS,GAAGN,KAAK,KAAK,KAAK,GAAG,KAAK,GAAG,QAAQ;MACpD,IAAIO,QAAQ,GAAG,gDAAgDD,SAAS,EAAE;;MAE1E;MACA,IAAIL,cAAc,EAAE;QAClBM,QAAQ,GAAG,2CAA2CN,cAAc,WAAW;MACjF;MAEA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,EAAE;QACrCJ;MACF,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzDT,OAAO,CAACU,KAAK,CAAC,iBAAiB,EAAEN,QAAQ,CAACO,MAAM,EAAEJ,SAAS,CAAC;QAC5D,MAAM,IAAIK,KAAK,CAAC,iCAAiCR,QAAQ,CAACO,MAAM,EAAE,CAAC;MACrE;MAEA,MAAME,IAAI,GAAG,MAAMT,QAAQ,CAACI,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMM,iBAAiB,GAAGD,IAAI,CAACjD,QAAQ,GAAGiD,IAAI,CAACjD,QAAQ,GAAGiD,IAAI,CAACE,GAAG,CAACC,GAAG,KAAK;QACzEC,EAAE,EAAED,GAAG,CAACC,EAAE;QACVC,IAAI,EAAEF,GAAG,CAACG,OAAO;QACjBC,MAAM,EAAEJ,GAAG,CAACK,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG,KAAK;QAC5CC,SAAS,EAAEN,GAAG,CAACM,SAAS,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrD,CAAC,CAAC,CAAC;MAEH3D,WAAW,CAACiD,iBAAiB,IAAI,EAAE,CAAC;IACtC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD;MACA,MAAMe,QAAQ,GAAG3D,aAAa,KAAK,KAAK,GAAG,KAAK,GAAG,QAAQ;MAC3D,MAAM4D,cAAc,GAAG5C,YAAY,CAACC,OAAO,CAAC,GAAG0C,QAAQ,WAAW,CAAC;MACnE,IAAIC,cAAc,EAAE;QAClB,IAAI;UACF7D,WAAW,CAACwB,IAAI,CAACC,KAAK,CAACoC,cAAc,CAAC,CAAC;QACzC,CAAC,CAAC,OAAOC,CAAC,EAAE;UACV3B,OAAO,CAACU,KAAK,CAAC,gCAAgC,EAAEiB,CAAC,CAAC;QACpD;MACF;IACF,CAAC,SAAS;MACRtD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMuD,WAAW,GAAGA,CAAA,KAAM;IACxBjE,QAAQ,CAACD,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EAChD,CAAC;EAED,MAAMmE,iBAAiB,GAAIC,QAAQ,IAAK;IACtC3D,OAAO,CAAC2D,QAAQ,CAAC;;IAEjB;IACA,IAAIA,QAAQ,IAAIA,QAAQ,CAAChC,KAAK,EAAE;MAC9BhB,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEsC,QAAQ,CAAChC,KAAK,CAAC;MAC7CE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE6B,QAAQ,CAAChC,KAAK,CAAC;IAC7D,CAAC,MAAM;MACLE,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEoB,QAAQ,CAAC;IACxD;;IAEA;IACA7D,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAM8D,YAAY,GAAGA,CAAA,KAAM;IACzBjD,YAAY,CAACkD,UAAU,CAAC,OAAO,CAAC;IAChClD,YAAY,CAACkD,UAAU,CAAC,MAAM,CAAC;IAC/BlD,YAAY,CAACkD,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACAlD,YAAY,CAACkD,UAAU,CAAC,cAAc,CAAC;IACvClD,YAAY,CAACkD,UAAU,CAAC,iBAAiB,CAAC;IAE1C7D,OAAO,CAAC,IAAI,CAAC;IACbN,WAAW,CAAC,EAAE,CAAC;IACfE,gBAAgB,CAAC,IAAI,CAAC;IACtBE,oBAAoB,CAAC,KAAK,CAAC;IAC3BM,uBAAuB,CAAC,IAAI,CAAC;IAC7BE,QAAQ,CAAC,EAAE,CAAC;IACZE,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMsD,gBAAgB,GAAIC,WAAW,IAAK;IACxC/D,OAAO,CAAC+D,WAAW,CAAC;IACpBpD,YAAY,CAACU,OAAO,CAAC,MAAM,EAAEH,IAAI,CAAC8C,SAAS,CAACD,WAAW,CAAC,CAAC;EAC3D,CAAC;;EAED;EACA,MAAME,eAAe,GAAG,MAAOC,KAAK,IAAK;IACvC,IAAI;MACFrC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEoC,KAAK,CAAC;;MAErD;MACA,MAAMC,YAAY,GAAG,MAAMjC,KAAK,CAAC,gDAAgD,EAAE;QACjFkC,MAAM,EAAE,MAAM;QACdxC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDb,IAAI,EAAEG,IAAI,CAAC8C,SAAS,CAAC;UAAEK,OAAO,EAAEH;QAAM,CAAC;MACzC,CAAC,CAAC;MAEF,IAAI,CAACC,YAAY,CAAChC,EAAE,EAAE;QACpBN,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAE4B,YAAY,CAAC3B,MAAM,CAAC;QAC1D,MAAM8B,SAAS,GAAG,MAAMH,YAAY,CAACpB,IAAI,CAAC,CAAC;QAC3ClB,OAAO,CAACU,KAAK,CAAC,iBAAiB,EAAE+B,SAAS,CAAC;QAC3C,MAAM,IAAI7B,KAAK,CAAC,oBAAoB0B,YAAY,CAAC3B,MAAM,EAAE,CAAC;MAC5D;MAEA,MAAME,IAAI,GAAG,MAAMyB,YAAY,CAAC9B,IAAI,CAAC,CAAC;MACtCR,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEY,IAAI,CAAC;MACzC,OAAOA,IAAI,CAACT,QAAQ;IACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;;MAE1C;MACA,OAAOgC,eAAe,CAACL,KAAK,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAMK,eAAe,GAAIF,OAAO,IAAK;IACnC,IAAI;MACF;MACA,IAAI,iBAAiB,CAACG,IAAI,CAACH,OAAO,CAAC,IAAI,UAAU,CAACG,IAAI,CAACH,OAAO,CAAC,EAAE;QAC/D,IAAI;UACF;UACA,MAAMI,MAAM,GAAGC,IAAI,CAACL,OAAO,CAACM,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;UAC/C,OAAO,GAAGN,OAAO,MAAMI,MAAM,EAAE;QACjC,CAAC,CAAC,OAAOjB,CAAC,EAAE;UACV,OAAO,iEAAiE;QAC1E;MACF;MAEA,MAAMoB,QAAQ,GAAGP,OAAO,CAACQ,WAAW,CAAC,CAAC;MAEtC,IAAID,QAAQ,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC9D,OAAO,oEAAoE;MAC7E;MAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC9D,OAAO,qEAAqE;MAC9E;MAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC5D,OAAO,mEAAmE;MAC5E;MAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC1D,OAAO,mEAAmE;MAC5E;MAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC1D,OAAO,2EAA2E;MACpF;MAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,UAAU,CAAC,IAC3DF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC9D,OAAO,wHAAwH;MACjI;MAEA,OAAO,uBAAuBT,OAAO,gIAAgI;IACvK,CAAC,CAAC,OAAOb,CAAC,EAAE;MACV,OAAO,oBAAoBA,CAAC,CAACa,OAAO,EAAE;IACxC;EACF,CAAC;;EAED;EACA,MAAMU,WAAW,GAAIV,OAAO,IAAK;IAC/B,MAAMO,QAAQ,GAAGP,OAAO,CAACQ,WAAW,CAAC,CAAC;IAEtC,IAAID,QAAQ,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC9D,OAAO,0CAA0C;IACnD;IAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;MACjC,OAAO,sGAAsG;IAC/G;IAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,KAAKF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE;MAC5F,OAAO,4IAA4I;IACrJ;IAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC5D,OAAO,2FAA2F;IACpG;IAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC3D,OAAO,oJAAoJ;IAC7J;IAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC9B,OAAO,mKAAmK;IAC5K;IAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,KAAK,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,aAAa,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;MAChG,OAAO,yIAAyI;IAClJ;IAEA,IAAIF,QAAQ,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;MACjC,OAAO,6EAA6E;IACtF;IAEA,IAAIF,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO,0EAA0E;IACnF;;IAEA;IACA,OAAO,IAAIX,OAAO,0GAA0G;EAC9H,CAAC;;EAED;EACA,MAAMY,WAAW,GAAIf,KAAK,IAAK;IAC7B,MAAMgB,YAAY,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EACzD,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAC3D,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;IAE5D,MAAMC,SAAS,GAAG,wBAAwB;IAE1C,MAAMC,UAAU,GAAGlB,KAAK,CAACW,WAAW,CAAC,CAAC;;IAEtC;IACA,MAAMQ,cAAc,GAAGH,YAAY,CAACI,IAAI,CAACC,OAAO,IAAIH,UAAU,CAACN,QAAQ,CAACS,OAAO,CAAC,CAAC;;IAEjF;IACA,MAAMC,aAAa,GAAGL,SAAS,CAACX,IAAI,CAACN,KAAK,CAAC;IAE3C,OAAOmB,cAAc,IAAIG,aAAa;EACxC,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAOC,WAAW,IAAK;IAC/C,IAAI,CAACA,WAAW,CAACC,IAAI,CAAC,CAAC,EAAE;;IAEzB;IACA,MAAMC,WAAW,GAAG;MAClB9C,EAAE,EAAEM,IAAI,CAACyC,GAAG,CAAC,CAAC;MACd9C,IAAI,EAAE2C,WAAW;MACjBzC,MAAM,EAAE,MAAM;MACdE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED3D,WAAW,CAACoG,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEF,WAAW,CAAC,CAAC;IAE3D,IAAI;MACF,IAAIG,YAAY;;MAEhB;MACA,IAAIpG,aAAa,KAAK,QAAQ,IAAKA,aAAa,KAAK,KAAK,IAAIsF,WAAW,CAACS,WAAW,CAAE,EAAE;QACvF;QACAK,YAAY,GAAG,MAAM9B,eAAe,CAACyB,WAAW,CAAC;MACnD,CAAC,MAAM;QACL;QACAK,YAAY,GAAGhB,WAAW,CAACW,WAAW,CAAC;MACzC;;MAEA;MACA,MAAMM,UAAU,GAAG;QACjBlD,EAAE,EAAEM,IAAI,CAACyC,GAAG,CAAC,CAAC,GAAG,CAAC;QAClB9C,IAAI,EAAEgD,YAAY;QAClB9C,MAAM,EAAE,KAAK;QACbE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAED,MAAM4C,eAAe,GAAG,CAAC,GAAGxG,QAAQ,EAAEmG,WAAW,EAAEI,UAAU,CAAC;MAC9DtG,WAAW,CAACuG,eAAe,CAAC;;MAE5B;MACA,MAAM3C,QAAQ,GAAG3D,aAAa,KAAK,KAAK,GAAG,KAAK,GAAG,QAAQ;MAC3DgB,YAAY,CAACU,OAAO,CAAC,GAAGiC,QAAQ,WAAW,EAAEpC,IAAI,CAAC8C,SAAS,CAACiC,eAAe,CAAC,CAAC;;MAE7E;MACA,IAAI9F,oBAAoB,EAAE;QACxB,IAAI;UACF,MAAMwB,KAAK,GAAGhB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UAE3C,MAAMsB,KAAK,CAAC,2CAA2C/B,oBAAoB,WAAW,EAAE;YACtFiE,MAAM,EAAE,MAAM;YACdxC,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,eAAe,EAAE,UAAUD,KAAK;YAClC,CAAC;YACDZ,IAAI,EAAEG,IAAI,CAAC8C,SAAS,CAAC;cACnBhB,OAAO,EAAE0C,WAAW;cACpBxC,IAAI,EAAE;YACR,CAAC;UACH,CAAC,CAAC;UAEF,MAAMhB,KAAK,CAAC,2CAA2C/B,oBAAoB,WAAW,EAAE;YACtFiE,MAAM,EAAE,MAAM;YACdxC,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,eAAe,EAAE,UAAUD,KAAK;YAClC,CAAC;YACDZ,IAAI,EAAEG,IAAI,CAAC8C,SAAS,CAAC;cACnBhB,OAAO,EAAE+C,YAAY;cACrB7C,IAAI,EAAE;YACR,CAAC;UACH,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOX,KAAK,EAAE;UACdV,OAAO,CAACU,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC5D;MACF;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;;MAE9B;MACA,MAAM2D,YAAY,GAAG;QACnBpD,EAAE,EAAEM,IAAI,CAACyC,GAAG,CAAC,CAAC,GAAG,CAAC;QAClB9C,IAAI,EAAE,mDAAmDR,KAAK,CAAC8B,OAAO,EAAE;QACxEpB,MAAM,EAAE,KAAK;QACbkD,OAAO,EAAE,IAAI;QACbhD,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAED,MAAM4C,eAAe,GAAG,CAAC,GAAGxG,QAAQ,EAAEmG,WAAW,EAAEM,YAAY,CAAC;MAChExG,WAAW,CAACuG,eAAe,CAAC;MAC5BtF,YAAY,CAACU,OAAO,CAAC,GAAG1B,aAAa,WAAW,EAAEuB,IAAI,CAAC8C,SAAS,CAACiC,eAAe,CAAC,CAAC;IACpF;EACF,CAAC;EAED,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF;MACA,IAAIrG,IAAI,IAAIJ,aAAa,IAAIQ,oBAAoB,EAAE;QACjD,MAAMwB,KAAK,GAAGhB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMgB,OAAO,GAAG;UACd,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUD,KAAK;QAClC,CAAC;;QAED;QACA,MAAMO,KAAK,CAAC,2CAA2C/B,oBAAoB,WAAW,EAAE;UACtFiE,MAAM,EAAE,QAAQ;UAChBxC;QACF,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI7B,IAAI,IAAIJ,aAAa,EAAE;QAChC,MAAMgC,KAAK,GAAGhB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMgB,OAAO,GAAG;UACd,cAAc,EAAE;QAClB,CAAC;QAED,IAAID,KAAK,EAAE;UACTC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;QAC9C;QAEA,MAAMI,SAAS,GAAGpC,aAAa,KAAK,KAAK,GAAG,KAAK,GAAG,QAAQ;QAC5D,MAAMuC,KAAK,CAAC,gDAAgDH,SAAS,EAAE,EAAE;UACvEqC,MAAM,EAAE,QAAQ;UAChBxC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE;;IAEA;IACA7C,WAAW,CAAC,EAAE,CAAC;IACf,MAAM4D,QAAQ,GAAG3D,aAAa,KAAK,KAAK,GAAG,KAAK,GAAG,QAAQ;IAC3DgB,YAAY,CAACkD,UAAU,CAAC,GAAGP,QAAQ,WAAW,CAAC;EACjD,CAAC;EAED,MAAM+C,WAAW,GAAI5E,KAAK,IAAK;IAC7B7B,gBAAgB,CAAC6B,KAAK,CAAC;IACvB3B,oBAAoB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMwG,mBAAmB,GAAGA,CAAA,KAAM;IAChC1G,gBAAgB,CAAC,IAAI,CAAC;IACtBE,oBAAoB,CAAC,IAAI,CAAC;IAC1BJ,WAAW,CAAC,EAAE,CAAC;IACfU,uBAAuB,CAAC,IAAI,CAAC;EAC/B,CAAC;EAED,MAAMmG,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,OAAO,GAAG;MACd1D,EAAE,EAAEM,IAAI,CAACyC,GAAG,CAAC,CAAC,CAACY,QAAQ,CAAC,CAAC;MACzBC,KAAK,EAAE,aAAa;MACpBjH,QAAQ,EAAE,EAAE;MACZkH,SAAS,EAAE,IAAIvD,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;QACzCkC,MAAM,EAAE,MAAM;QACdxC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUjB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC1D,CAAC;QACDG,IAAI,EAAEG,IAAI,CAAC8C,SAAS,CAACwC,OAAO;MAC9B,CAAC,CAAC;MAEF,IAAIvE,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMyE,SAAS,GAAG,MAAM3E,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC/B,QAAQ,CAAC,CAACsG,SAAS,EAAE,GAAGvG,KAAK,CAAC,CAAC;QAC/BG,aAAa,CAACoG,SAAS,CAAC;QACxBjG,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEH,IAAI,CAAC8C,SAAS,CAAC,CAAC4C,SAAS,EAAE,GAAGvG,KAAK,CAAC,CAAC,CAAC;MACtE;IACF,CAAC,CAAC,OAAOwG,GAAG,EAAE;MACZhF,OAAO,CAACU,KAAK,CAAC,0BAA0B,EAAEsE,GAAG,CAAC;MAC9C;MACAvG,QAAQ,CAAC,CAACkG,OAAO,EAAE,GAAGnG,KAAK,CAAC,CAAC;MAC7BG,aAAa,CAACgG,OAAO,CAAC;MACtB7F,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEH,IAAI,CAAC8C,SAAS,CAAC,CAACwC,OAAO,EAAE,GAAGnG,KAAK,CAAC,CAAC,CAAC;IACpE;EACF,CAAC;EAED,MAAMyG,gBAAgB,GAAG,MAAOC,MAAM,IAAK;IACzC,IAAI;MACF,MAAM9E,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc6E,MAAM,EAAE,EAAE;QACnD3C,MAAM,EAAE,QAAQ;QAChBxC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUjB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC1D;MACF,CAAC,CAAC;MAEF,IAAIqB,QAAQ,CAACE,EAAE,EAAE;QACf,MAAM6E,YAAY,GAAG3G,KAAK,CAAC4G,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACpE,EAAE,KAAKiE,MAAM,CAAC;QAC7DzG,QAAQ,CAAC0G,YAAY,CAAC;QACtB,IAAI,CAAAzG,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEuC,EAAE,MAAKiE,MAAM,EAAE;UAC7BvG,aAAa,CAAC,IAAI,CAAC;QACrB;QACAG,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEH,IAAI,CAAC8C,SAAS,CAACgD,YAAY,CAAC,CAAC;MAC7D;IACF,CAAC,CAAC,OAAOH,GAAG,EAAE;MACZhF,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEsE,GAAG,CAAC;MAC1C;MACA,MAAMG,YAAY,GAAG3G,KAAK,CAAC4G,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACpE,EAAE,KAAKiE,MAAM,CAAC;MAC7DzG,QAAQ,CAAC0G,YAAY,CAAC;MACtB,IAAI,CAAAzG,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEuC,EAAE,MAAKiE,MAAM,EAAE;QAC7BvG,aAAa,CAAC,IAAI,CAAC;MACrB;MACAG,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEH,IAAI,CAAC8C,SAAS,CAACgD,YAAY,CAAC,CAAC;IAC7D;EACF,CAAC;;EAED;EACA,IAAI,CAACjH,IAAI,EAAE;IACT,oBACEb,OAAA,CAACZ,MAAM;MAAA6I,QAAA,eACLjI,OAAA;QAAK8B,SAAS,EAAE,OAAOP,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;QAAA0G,QAAA,eACrDjI,OAAA,CAACX,MAAM;UAAA4I,QAAA,gBACLjI,OAAA,CAACV,KAAK;YACJ4I,IAAI,EAAC,QAAQ;YACbC,OAAO,eACLnI,OAAA,CAACH,KAAK;cAACuI,OAAO,EAAE5D,iBAAkB;cAACjD,UAAU,EAAEA;YAAW;cAAA8G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAC7D;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACFxI,OAAA,CAACV,KAAK;YACJ4I,IAAI,EAAC,WAAW;YAChBC,OAAO,eACLnI,OAAA,CAACF,QAAQ;cAACsI,OAAO,EAAE5D,iBAAkB;cAACjD,UAAU,EAAEA;YAAW;cAAA8G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAChE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACFxI,OAAA,CAACV,KAAK;YACJ4I,IAAI,EAAC,GAAG;YACRC,OAAO,eACLnI,OAAA,CAACL,QAAQ;cAAC8I,aAAa,EAAEjE;YAAkB;cAAA6D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAC9C;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAEb;EAEA,oBACExI,OAAA,CAACZ,MAAM;IAAA6I,QAAA,eACLjI,OAAA;MAAK8B,SAAS,EAAE,OAAOP,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;MAAA0G,QAAA,eACrDjI,OAAA,CAACX,MAAM;QAAA4I,QAAA,gBACLjI,OAAA,CAACV,KAAK;UACJ4I,IAAI,EAAC,UAAU;UACfC,OAAO,eACLnI,OAAA,CAACJ,WAAW;YACViB,IAAI,EAAEA,IAAK;YACX6H,QAAQ,EAAEhE,YAAa;YACvBiE,YAAY,EAAE/D,gBAAiB;YAC/BrD,UAAU,EAAEA;UAAW;YAAA8G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB;QACF;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACFxI,OAAA,CAACV,KAAK;UACJ4I,IAAI,EAAC,GAAG;UACRC,OAAO,eACLnI,OAAA;YAAK8B,SAAS,EAAC,gBAAgB;YAAAmG,QAAA,gBAC7BjI,OAAA,CAACP,OAAO;cACN0B,KAAK,EAAEA,KAAM;cACbE,UAAU,EAAEA,UAAW;cACvBuH,YAAY,EAAEtH,aAAc;cAC5BuH,SAAS,EAAExB,aAAc;cACzByB,YAAY,EAAElB,gBAAiB;cAC/BrG,UAAU,EAAEA;YAAW;cAAA8G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxB,CAAC,eACFxI,OAAA;cAAK8B,SAAS,EAAC,gBAAgB;cAAAmG,QAAA,EAC5BtH,iBAAiB,gBAChBX,OAAA,CAACN,aAAa;gBAACqJ,aAAa,EAAE5B;cAAY;gBAAAkB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,GAC3C/H,aAAa,gBACfT,OAAA,CAAAE,SAAA;gBAAA+H,QAAA,eACEjI,OAAA,CAACR,QAAQ;kBACPe,QAAQ,EAAEA,QAAS;kBACnByI,aAAa,EAAEzC,iBAAkB;kBACjClG,KAAK,EAAEA,KAAM;kBACbU,SAAS,EAAEA;gBAAU;kBAAAsH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtB;cAAC,gBACF,CAAC,gBAEHxI,OAAA,CAACN,aAAa;gBAACqJ,aAAa,EAAE5B;cAAY;gBAAAkB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAC7C;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QACN;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAACpI,EAAA,CAlkBQD,GAAG;AAAA8I,EAAA,GAAH9I,GAAG;AAokBZ,eAAeA,GAAG;AAAC,IAAA8I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}