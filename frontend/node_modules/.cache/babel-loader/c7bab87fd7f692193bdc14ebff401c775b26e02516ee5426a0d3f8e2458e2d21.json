{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ali\\\\Desktop\\\\SonVersiyon\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatArea from './components/ChatArea';\nimport Sidebar from './components/Sidebar';\nimport ModelSelector from './components/ModelSelector';\nimport AuthPage from './components/Auth/AuthPage';\nimport UserProfile from './components/UserProfile';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const [messages, setMessages] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [showModelSelector, setShowModelSelector] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    document.body.className = `${theme}-theme`;\n  }, [theme]);\n  useEffect(() => {\n    // Check if user is already logged in (from localStorage)\n    const storedUser = localStorage.getItem('demoUser');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (e) {\n        console.error('Error parsing stored user:', e);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Fetch chat history when user selects a model\n    if (user && selectedModel) {\n      fetchChatHistory(selectedModel);\n    }\n  }, [user, selectedModel]);\n  const fetchChatHistory = async model => {\n    if (!user) return;\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      const modelType = model === 'api' ? 'api' : 'custom';\n      const response = await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\n        headers\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch chat history');\n      }\n      const data = await response.json();\n      setMessages(data.messages || []);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      // If backend is not available, use local storage as fallback\n      const storedMessages = localStorage.getItem(`${selectedModel}_messages`);\n      if (storedMessages) {\n        try {\n          setMessages(JSON.parse(storedMessages));\n        } catch (e) {\n          console.error('Error parsing stored messages:', e);\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n  const handleAuthSuccess = userData => {\n    setUser(userData);\n    // After authentication, show model selector\n    setShowModelSelector(true);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('demoUser');\n    setUser(null);\n    setMessages([]);\n    setSelectedModel(null);\n    setShowModelSelector(false);\n  };\n  const handleSendMessage = async messageText => {\n    if (!messageText.trim()) return;\n\n    // Add user message to the chat\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      // API endpoint based on selected model\n      const endpoint = selectedModel === 'api' ? 'http://localhost:8000/api/chat' : 'http://localhost:8000/api/custom-model';\n\n      // Include auth token if available\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const token = localStorage.getItem('token');\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          message: messageText\n        })\n      });\n      if (!response.ok) {\n        throw new Error('API response was not ok');\n      }\n      const data = await response.json();\n\n      // Add bot response to chat\n      const botMessage = {\n        id: Date.now() + 1,\n        text: data.response,\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      };\n      const updatedMessages = [...messages, userMessage, botMessage];\n      setMessages(updatedMessages);\n\n      // Save to local storage as fallback\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\n    } catch (error) {\n      console.error('Error:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: 'Yanıt verilemiyor, lütfen tekrar deneyin.',\n        sender: 'bot',\n        isError: true,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    }\n  };\n  const clearChat = async () => {\n    try {\n      if (user && selectedModel) {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json'\n        };\n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\n        const response = await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\n          method: 'DELETE',\n          headers\n        });\n        if (!response.ok) {\n          throw new Error('Failed to clear chat history');\n        }\n      }\n    } catch (error) {\n      console.error('Error clearing chat history:', error);\n    }\n\n    // Clear local state and storage regardless of API success\n    setMessages([]);\n    localStorage.removeItem(`${selectedModel}_messages`);\n  };\n  const selectModel = model => {\n    setSelectedModel(model);\n    setShowModelSelector(false);\n  };\n  const resetModelSelection = () => {\n    setSelectedModel(null);\n    setShowModelSelector(true);\n    setMessages([]);\n  };\n\n  // If not logged in, show auth page\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(AuthPage, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: showModelSelector ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n      onSelectModel: selectModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this) : selectedModel ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        toggleTheme: toggleTheme,\n        theme: theme,\n        clearChat: clearChat,\n        resetModelSelection: resetModelSelection,\n        selectedModel: selectedModel,\n        children: /*#__PURE__*/_jsxDEV(UserProfile, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n        messages: messages,\n        onSendMessage: handleSendMessage,\n        theme: theme,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(ModelSelector, {\n      onSelectModel: selectModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5qq3iCUni6o3Yioswa1uBbV4XOo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatArea","Sidebar","ModelSelector","AuthPage","UserProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","theme","setTheme","messages","setMessages","selectedModel","setSelectedModel","showModelSelector","setShowModelSelector","user","setUser","isLoading","setIsLoading","document","body","className","storedUser","localStorage","getItem","JSON","parse","e","console","error","fetchChatHistory","model","token","headers","modelType","response","fetch","ok","Error","data","json","storedMessages","toggleTheme","handleAuthSuccess","userData","handleLogout","removeItem","handleSendMessage","messageText","trim","userMessage","id","Date","now","text","sender","timestamp","toISOString","prevMessages","endpoint","method","stringify","message","botMessage","updatedMessages","setItem","errorMessage","isError","clearChat","selectModel","resetModelSelection","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","children","onSelectModel","onLogout","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/ali/Desktop/SonVersiyon/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ChatArea from './components/ChatArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport ModelSelector from './components/ModelSelector';\r\nimport AuthPage from './components/Auth/AuthPage';\r\nimport UserProfile from './components/UserProfile';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [showModelSelector, setShowModelSelector] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    document.body.className = `${theme}-theme`;\r\n  }, [theme]);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in (from localStorage)\r\n    const storedUser = localStorage.getItem('demoUser');\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (e) {\r\n        console.error('Error parsing stored user:', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch chat history when user selects a model\r\n    if (user && selectedModel) {\r\n      fetchChatHistory(selectedModel);\r\n    }\r\n  }, [user, selectedModel]);\r\n\r\n  const fetchChatHistory = async (model) => {\r\n    if (!user) return;\r\n    \r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      const modelType = model === 'api' ? 'api' : 'custom';\r\n      const response = await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\r\n        headers,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch chat history');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setMessages(data.messages || []);\r\n    } catch (error) {\r\n      console.error('Error fetching chat history:', error);\r\n      // If backend is not available, use local storage as fallback\r\n      const storedMessages = localStorage.getItem(`${selectedModel}_messages`);\r\n      if (storedMessages) {\r\n        try {\r\n          setMessages(JSON.parse(storedMessages));\r\n        } catch (e) {\r\n          console.error('Error parsing stored messages:', e);\r\n        }\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  const handleAuthSuccess = (userData) => {\r\n    setUser(userData);\r\n    // After authentication, show model selector\r\n    setShowModelSelector(true);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('demoUser');\r\n    setUser(null);\r\n    setMessages([]);\r\n    setSelectedModel(null);\r\n    setShowModelSelector(false);\r\n  };\r\n\r\n  const handleSendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n\r\n    // Add user message to the chat\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: messageText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n\r\n    try {\r\n      // API endpoint based on selected model\r\n      const endpoint = selectedModel === 'api' \r\n        ? 'http://localhost:8000/api/chat' \r\n        : 'http://localhost:8000/api/custom-model';\r\n      \r\n      // Include auth token if available\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({ message: messageText }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('API response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Add bot response to chat\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: data.response,\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      const updatedMessages = [...messages, userMessage, botMessage];\r\n      setMessages(updatedMessages);\r\n      \r\n      // Save to local storage as fallback\r\n      localStorage.setItem(`${selectedModel}_messages`, JSON.stringify(updatedMessages));\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        text: 'Yanıt verilemiyor, lütfen tekrar deneyin.',\r\n        sender: 'bot',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n    }\r\n  };\r\n\r\n  const clearChat = async () => {\r\n    try {\r\n      if (user && selectedModel) {\r\n        const token = localStorage.getItem('token');\r\n        const headers = {\r\n          'Content-Type': 'application/json',\r\n        };\r\n        \r\n        if (token) {\r\n          headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        \r\n        const modelType = selectedModel === 'api' ? 'api' : 'custom';\r\n        const response = await fetch(`http://localhost:8000/api/chat-history?model=${modelType}`, {\r\n          method: 'DELETE',\r\n          headers,\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to clear chat history');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing chat history:', error);\r\n    }\r\n    \r\n    // Clear local state and storage regardless of API success\r\n    setMessages([]);\r\n    localStorage.removeItem(`${selectedModel}_messages`);\r\n  };\r\n\r\n  const selectModel = (model) => {\r\n    setSelectedModel(model);\r\n    setShowModelSelector(false);\r\n  };\r\n\r\n  const resetModelSelection = () => {\r\n    setSelectedModel(null);\r\n    setShowModelSelector(true);\r\n    setMessages([]);\r\n  };\r\n\r\n  // If not logged in, show auth page\r\n  if (!user) {\r\n    return <AuthPage onAuthSuccess={handleAuthSuccess} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {showModelSelector ? (\r\n        <ModelSelector onSelectModel={selectModel} />\r\n      ) : selectedModel ? (\r\n        <>\r\n          <Sidebar\r\n            toggleTheme={toggleTheme}\r\n            theme={theme}\r\n            clearChat={clearChat}\r\n            resetModelSelection={resetModelSelection}\r\n            selectedModel={selectedModel}\r\n          >\r\n            <UserProfile user={user} onLogout={handleLogout} />\r\n          </Sidebar>\r\n          <ChatArea\r\n            messages={messages}\r\n            onSendMessage={handleSendMessage}\r\n            theme={theme}\r\n            isLoading={isLoading}\r\n          />\r\n        </>\r\n      ) : (\r\n        <ModelSelector onSelectModel={selectModel} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}